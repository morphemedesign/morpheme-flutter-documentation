[{"title":"Changelog","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/changelog/","content":"","keywords":""},{"title":"1.0.0​","type":1,"pageTitle":"Changelog","url":"/morpheme-flutter-documentation/docs/morpheme_cli/changelog/#100","content":"Initial version. "},{"title":"Version","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/general/version","content":"Version This command is used to check the CLI version. morpheme -v Alternative: morpheme --version Output Morpheme CLI 1.0.0 ","keywords":""},{"title":"App Bundle","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle","content":"","keywords":""},{"title":"Default​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#default","content":"By default this command will build the project with the release version staging flavor. morpheme build appbundle  After the building process is complete, we can check the .abb file in the build/app/outputs/appbundle/ and build/app/outputs/flutter-appbundle/ "},{"title":"Options :​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#options-","content":"morpheme build appbundle [flavor/environment] [app_version] [custom_target] [build_number] [build_name] [[no-]obfuscate] [split-debug-info]  Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tBuild project on dev environment (Default) -f stag\t--flavor stag\tBuild project on staging environment -f prod\t--flavor prod\tBuild project on production environment Generate l10n :  Generate l10n\tDescription\t--[no]l10n\tGenerate l10n first before running other command. (defaults to on)\t App Version : App Version\tDescription--debug\tBuild project on debug mode (Default) --profile\tBuild project on profile mode --release\tBuild project on release mode (Default) Custom Target : Custom Target\tAlternative\tDescription-t [url_file]\t--target [url_file]\tThis command is used to build the application in a specific file, by default it will run the lib/main.dart file. Custom Build Name : Build Name\tDescription--build-name [build_number]\tThis command is used to build application with a specific name. Custom Build Number : Build Number\tDescription--build-number [build_number]\tThis command is used to build application with a specific version number. No Obfuscate : Build Number\tDescription--[no-]obfuscate\tIn a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with &quot;--split-debug-info&quot; option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. (defaults to on) Split Debug Info : Build Number\tDescription--split-debug-info\tIn a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with &quot;--analyze-size&quot;. (defaults to &quot;./.symbols/&quot;) "},{"title":"Example - Custom Version​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#example---custom-version","content":"Debug Version morpheme build appbundle --debug Profile Version morpheme build appbundle --profile Release Version morpheme build appbundle --release  "},{"title":"Example - Custom Environment/Flavor​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#example---custom-environmentflavor","content":"Dev Environment morpheme build appbundle -f dev Alternative: morpheme build appbundle --flavor dev Staging Environment morpheme build appbundle -f dev Alternative: morpheme build appbundle --flavor dev Production Environment morpheme build appbundle -f dev Alternative: morpheme build appbundle --flavor dev  "},{"title":"Example - Custom Version and Environment Combination​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#example---custom-version-and-environment-combination","content":"morpheme build appbundle --release -f prod  "},{"title":"Example - Custom Target​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#example---custom-target","content":"morpheme build appbundle --target [url_file *optional]  Alternative: morpheme build appbundle --t [url_file *optional]  "},{"title":"Example - Custom morpheme.yaml​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#example---custom-morphemeyaml","content":"morpheme build appbundle --morpheme-yaml [custom_path]  "},{"title":"Example - Custom Build Number​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#example---custom-build-number","content":"morpheme build appbundle --build-number [build_number]  For example, we create an appbundle file with the custom build number 1.0.0 morpheme build appbundle --build-number 1.0.0  "},{"title":"Example - Custom Build Name​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#example---custom-build-name","content":"morpheme build appbundle --build-name [build_name]  For example, we create an appbundle file with the name application_release morpheme build appbundle --build-name application_release  "},{"title":"Example - No Obfuscate​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#example---no-obfuscate","content":"morpheme build appbundle --[no-]obfuscate  "},{"title":"Example - Split Debug Info​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/app_bundle#example---split-debug-info","content":"morpheme build appbundle --split-debug-info  "},{"title":"Pre Build Ios","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/prebuild/ios","content":"","keywords":""},{"title":"Generate Results​","type":1,"pageTitle":"Pre Build Ios","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/prebuild/ios#generate-results","content":"There are 3 files that will be generated from this ios prebuild: ios/fastlane/Appfileios/Runner.xcodeproj/project.pbxprojios/ExportOptions.plist "},{"title":"Options​","type":1,"pageTitle":"Pre Build Ios","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/prebuild/ios#options","content":"Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tPre Build project on dev environment (Default) -f stag\t--flavor stag\tPre Build project on staging environment -f prod\t--flavor prod\tPre Build project on production environment "},{"title":"Migration​","type":1,"pageTitle":"Pre Build Ios","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/prebuild/ios#migration","content":"To migrate from previous version just add the file ios/deployment/appstore_deployment.json which was described earlier then in .gitlab-ci.yml .gitlab-ci.yml .build-ios: stage: build_ios resource_group: build_and_deploy_ios allow_failure: false script: # Get version name &amp; build number from tag - IFS='-' # Read the split words into an array based on dash delimiter. - read -a strarr &lt;&lt;&lt; &quot;$CI_COMMIT_TAG&quot; - VERSION_NAME=${strarr[1]} - BUILD_NUMBER=${strarr[2]} # Setup key ios - - echo &quot;$APP_STORE_JSON&quot; &gt; &quot;$PATH_APP_STORE_JSON&quot; + - morpheme_cli prebuild ios -f ${CI_ENVIRONMENT_NAME} # Change working directory to ios - cd ios # Set up code signing settings on Xcode project. - chmod +x deployment/provisioning.sh - ./deployment/provisioning.sh - pod install --repo-update # Change working directory to root - cd .. # Build ipa - morpheme_cli build ipa -f ${CI_ENVIRONMENT_NAME} --build-number=$BUILD_NUMBER --build-name=$VERSION_NAME --export-options-plist=&quot;$PATH_EXPORT_OPTIONS_PLISTS&quot; # artifacts: # If you want to generate artifacts, uncomment this script. # paths: # - $PATH_IPA  "},{"title":"Assets","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/assets","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Assets","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/assets#options","content":"morpheme assets [arguments]  To see all available options and flags, run morpheme assets --help. "},{"title":"Available Options​","type":1,"pageTitle":"Assets","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/assets#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. "},{"title":"API","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/api","content":"API This command is used to generate the API on a page morpheme api [api_name] -p [page_name] -f [feature_name] for the example we will generate an API named get_users on the feature master's users page. morpheme api get_users -p users -f master info Generated folders/files: ModelsEntitiesDatasourceRepositoriesUseCaseBLoC Customize models and entities, and add the end-points and BLoC to our cubit manually. tip Use the json to dart feature for more complete generated results, please check the following link Json2Dart caution API will not be generated if: The feature that we enter does not existThe page we entered does not existThe API name we entered already exists","keywords":""},{"title":"App Bundle","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle","content":"","keywords":""},{"title":"Default​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#default","content":"By default this command will build the project with the release version staging flavor. morpheme build ios  After the building process is complete, we can check the .ipa file in the build/ios/ipa/ or we can use the archive file in build/ios/archive/ folders. "},{"title":"Options :​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#options-","content":"morpheme build ios [flavor/environment] [app_version] [custom_target] [build_number] [build_name] [[no-]obfuscate] [split-debug-info]  Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tBuild project on dev environment (Default) -f stag\t--flavor stag\tBuild project on staging environment -f prod\t--flavor prod\tBuild project on production environment Generate l10n :  Generate l10n\tDescription\t--[no]l10n\tGenerate l10n first before running other command. (defaults to on)\t App Version : App Version\tDescription--debug\tBuild project on debug mode (Default) --profile\tBuild project on profile mode --release\tBuild project on release mode (Default) Custom Target : Custom Target\tAlternative\tDescription-t [url_file]\t--target [url_file]\tThis command is used to build the application in a specific file, by default it will run the lib/main.dart file. Custom Build Name : Build Name\tDescription--build-name [build_number]\tThis command is used to build application with a specific name. Custom Build Number : Build Number\tDescription--build-number [build_number]\tThis command is used to build application with a specific version number. No Obfuscate : Build Number\tDescription--[no-]obfuscate\tIn a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with &quot;--split-debug-info&quot; option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. (defaults to on) Split Debug Info : Build Number\tDescription--split-debug-info\tIn a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with &quot;--analyze-size&quot;. (defaults to &quot;./.symbols/&quot;) "},{"title":"Example - Custom Version​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#example---custom-version","content":"Debug Version morpheme build ios --debug Profile Version morpheme build ios --profile Release Version morpheme build ios --release  "},{"title":"Example - Custom Environment/Flavor​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#example---custom-environmentflavor","content":"Dev Environment morpheme build ios -f dev Alternative: morpheme build ios --flavor dev Staging Environment morpheme build ios -f dev Alternative: morpheme build ios --flavor dev Production Environment morpheme build ios -f dev Alternative: morpheme build ios --flavor dev  "},{"title":"Example - Custom Version and Environment Combination​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#example---custom-version-and-environment-combination","content":"morpheme build ios --release -f prod  "},{"title":"Example - Custom Target​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#example---custom-target","content":"morpheme build ios --target [url_file *optional]  Alternative: morpheme build ios --t [url_file *optional]  "},{"title":"Example - Custom morpheme.yaml​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#example---custom-morphemeyaml","content":"morpheme build ios --morpheme-yaml [custom_path]  "},{"title":"Example - Custom Build Number​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#example---custom-build-number","content":"morpheme build ios --build-number [build_number]  For example, we create an appbundle file with the custom build number 1.0.0 morpheme build ios --build-number 1.0.0  "},{"title":"Example - Custom Build Name​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#example---custom-build-name","content":"morpheme build ios --build-name [build_name]  For example, we create an appbundle file with the name application_release morpheme build ios --build-name application_release  "},{"title":"Example - No Obfuscate​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#example---no-obfuscate","content":"morpheme build ios --[no-]obfuscate  "},{"title":"Example - Split Debug Info​","type":1,"pageTitle":"App Bundle","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/app_bundle#example---split-debug-info","content":"morpheme build ios --split-debug-info  "},{"title":"APK File Format","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk","content":"","keywords":""},{"title":"Default​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#default","content":"By default this command will build the project with the release version staging flavor. morpheme build apk  After the building process is complete, we can check the .apk file in the build/app/outputs/apk/ and build/app/outputs/flutter-apk/ folders. "},{"title":"Options :​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#options-","content":"morpheme build apk [flavor/environment] [app_version] [custom_target] [build_number] [build_name] [[no-]obfuscate] [split-debug-info]  Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tBuild project on dev environment (Default) -f stag\t--flavor stag\tBuild project on staging environment -f prod\t--flavor prod\tBuild project on production environment Generate l10n :  Generate l10n\tDescription\t--[no]l10n\tGenerate l10n first before running other command. (defaults to on)\t App Version : App Version\tDescription--debug\tBuild project on debug mode (Default) --profile\tBuild project on profile mode --release\tBuild project on release mode (Default) Custom Target : Custom Target\tAlternative\tDescription-t [url_file]\t--target [url_file]\tThis command is used to build the application in a specific file, by default it will run the lib/main.dart file. Custom Build Name : Build Name\tDescription--build-name [build_number]\tThis command is used to build application with a specific name. Custom Build Number : Build Number\tDescription--build-number [build_number]\tThis command is used to build application with a specific version number. No Obfuscate : Build Number\tDescription--[no-]obfuscate\tIn a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with &quot;--split-debug-info&quot; option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. (defaults to on) Split Debug Info : Build Number\tDescription--split-debug-info\tIn a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with &quot;--analyze-size&quot;. (defaults to &quot;./.symbols/&quot;) "},{"title":"Example - Custom Version​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#example---custom-version","content":"Debug Version morpheme build apk --debug Profile Version morpheme build apk --profile Release Version morpheme build apk --release  "},{"title":"Example - Custom Environment/Flavor​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#example---custom-environmentflavor","content":"Dev Environment morpheme build apk -f dev Alternative: morpheme build apk --flavor dev Staging Environment morpheme build apk -f dev Alternative: morpheme build apk --flavor dev Production Environment morpheme build apk -f dev Alternative: morpheme build apk --flavor dev  "},{"title":"Example - Custom Version and Environment Combination​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#example---custom-version-and-environment-combination","content":"morpheme build apk --release -f prod  "},{"title":"Example - Custom Target​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#example---custom-target","content":"morpheme build apk --target [url_file *optional]  Alternative: morpheme build apk --t [url_file *optional]  "},{"title":"Example - Custom morpheme.yaml​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#example---custom-morphemeyaml","content":"morpheme build apk --morpheme-yaml [custom_path]  "},{"title":"Example - Custom Build Number​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#example---custom-build-number","content":"morpheme build apk --build-number [build_number]  For example, we create an apk file with the custom build number 1.0.0 morpheme build apk --build-number 1.0.0  "},{"title":"Example - Custom Build Name​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#example---custom-build-name","content":"morpheme build apk --build-name [build_name]  For example, we create an apk file with the name application_release morpheme build apk --build-name application_release  "},{"title":"Example - No Obfuscate​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#example---no-obfuscate","content":"morpheme build apk --[no-]obfuscate  "},{"title":"Example - Split Debug Info​","type":1,"pageTitle":"APK File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/android/apk#example---split-debug-info","content":"morpheme build apk --split-debug-info  "},{"title":"Apps","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/apps","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Apps","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/apps#example","content":"For the example we will generate a new apps named master morpheme apps driver  The apps driver folder will be created automatically, we can check in apps/driver/  caution The feature will not be generated if the apps name we enter already exists. "},{"title":"Help","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/general/help","content":"Help This command is used to view the list contained in the CLI. morpheme -h Alternative: morpheme --help Output Morpheme CLI Boost productivity with modular project creation, API generation &amp; folder structuring tools. Simplify Flutter dev! #Flutter #CLI Usage: morpheme &lt;command&gt; [arguments] Global options: -h, --help Print this usage information. -v, --version Reports the version of this tool. Available commands: Build build Build an app to android or ios prebuild Prepare setup ios before build Generate api Create a new api in page. apps Create a new apps module. assets Generate assets from setup assets pubspec.yaml. color2dart Generate dart color class from yaml. config Generate launch.json &amp; tasks.json related with config. core Create a new core packages module. endpoint Generate endpoint from json2dart.yaml. feature Create a new feature module. firebase Generate google service both android &amp; ios. json2dart Generate dart data class from json. l10n Generate localizations for the current project. local2dart Generate sqlite yaml to dart sqlite class helper page Create a new page in feature module. remove-apps Remove code apps. remove-feature Remove code feature. remove-page Remove code page in spesific feature. Project analyze Analyze code in all packages. clean Delete the l10n, build/ and .dart_tool/ in main, core &amp; features directories. coverage Run Flutter test coverage for the current project &amp; all modules. create Create flutter application with Morpheme Flutter Starter Kit cucumber Generate integration test from gherkin in .feature format Format all files .dart. get Get packages in a Flutter project, Core &amp; Features. refactor Refactor naming old to new naming run Run your Flutter app on an attached device with flavor. test Run Flutter unit tests for the current project &amp; all modules. unused-l10n Unused l10n all files .dart. upgrade Upgrade the current package's dependencies to latest versions.. Tools changelog get latest changelog doctor Show information about the installed tooling. init Init a new project from starter kit Run &quot;morpheme help &lt;command&gt;&quot; for more information about a command. ","keywords":""},{"title":"Core (New Packages)","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/core","content":"Core (New Packages) This command is used if we want to add a custom package to core. morpheme core [package_name] for the example of adding the snackbar package: morpheme core snackbar We can check the generated results in core/lib/packages/snackbar.","keywords":""},{"title":"IPA File Format","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa","content":"","keywords":""},{"title":"Default​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#default","content":"By default this command will build the project with the release version staging flavor. morpheme build ipa  After the building process is complete, we can check the .ipa file in the build/ios/ipa/ or we can use the archive file in build/ios/archive/ folders. "},{"title":"Options​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#options","content":"morpheme build ipa [flavor/environment] [app_version] [custom_target] [build_number] [build_name] [[no-]obfuscate] [split-debug-info]  Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tBuild project on dev environment (Default) -f stag\t--flavor stag\tBuild project on staging environment -f prod\t--flavor prod\tBuild project on production environment Generate l10n :  Generate l10n\tDescription\t--[no]l10n\tGenerate l10n first before running other command. (defaults to on)\t App Version : App Version\tDescription--debug\tBuild project on debug mode (Default) --profile\tBuild project on profile mode --release\tBuild project on release mode (Default) Custom Target : Custom Target\tAlternative\tDescription-t [url_file]\t--target [url_file]\tThis command is used to build the application in a specific file, by default it will run the lib/main.dart file. Custom Build Name : Build Name\tDescription--build-name [build_number]\tThis command is used to build application with a specific name. Custom Build Number : Build Number\tDescription--build-number [build_number]\tThis command is used to build application with a specific version number. No Obfuscate : Build Number\tDescription--[no-]obfuscate\tIn a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with &quot;--split-debug-info&quot; option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. (defaults to on) Split Debug Info : | Build Number | Description | |----------|-------------| | --split-debug-info | In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with &quot;--analyze-size&quot;. (defaults to &quot;./.symbols/&quot;) | "},{"title":"Example - Custom Version​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#example---custom-version","content":"Debug Version morpheme build ipa --debug  Profile Version morpheme build ipa --profile  Release Version morpheme build ipa --release  "},{"title":"Example - Custom Environment/Flavor​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#example---custom-environmentflavor","content":"Dev Environment morpheme build ipa -f dev Alternative: ```bash morpheme build ipa --flavor dev ```  Staging Environment morpheme build ipa -f dev  Alternative: ```bash morpheme build ipa --flavor dev ```  Production Environment ```bash morpheme build ipa -f dev ``` Alternative: ```bash morpheme build ipa --flavor dev ```  "},{"title":"Example - Custom Version and Environment Combination​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#example---custom-version-and-environment-combination","content":" morpheme build ipa --release -f prod  "},{"title":"Example - Custom Target​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#example---custom-target","content":" morpheme build ipa --target [url_file *optional]  Alternative: morpheme build ipa --t [url_file *optional]  "},{"title":"Example - Custom morpheme.yaml​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#example---custom-morphemeyaml","content":"morpheme build ipa --morpheme-yaml [custom_path]  "},{"title":"Example - Custom Build Number​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#example---custom-build-number","content":"morpheme build ipa --build-number [build_number]  For example, we create an ipa file with the custom build number 1.0.0 morpheme build ipa --build-number 1.0.0  "},{"title":"Example - Custom Build Name​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#example---custom-build-name","content":"morpheme build ipa --build-name [build_name]  For example, we create an ipa file with the name application_release morpheme build ipa --build-name application_release  "},{"title":"Example - No Obfuscate​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#example---no-obfuscate","content":"morpheme build ipa --[no-]obfuscate  "},{"title":"Example - Split Debug Info​","type":1,"pageTitle":"IPA File Format","url":"/morpheme-flutter-documentation/docs/morpheme_cli/build/ios/ipa#example---split-debug-info","content":"morpheme build ipa --split-debug-info  "},{"title":"Endpoint","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/endpoint","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Endpoint","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/endpoint#options","content":"morpheme endpoint [arguments]  To see all available options and flags, run morpheme endpoint --help. "},{"title":"Available Options​","type":1,"pageTitle":"Endpoint","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/endpoint#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. "},{"title":"l10n (Languages)","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/l10n","content":"","keywords":""},{"title":"Single .arb​","type":1,"pageTitle":"l10n (Languages)","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/l10n#single-arb","content":"We can create multilingual systems with single .arb  "},{"title":"Spesific .arb​","type":1,"pageTitle":"l10n (Languages)","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/l10n#spesific-arb","content":"We can create multilingual systems with specific .arb based on our features for easy maintenance with this structure:  caution We are unable to combine single and specific.arb ! "},{"title":"Generate The Languages​","type":1,"pageTitle":"l10n (Languages)","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/l10n#generate-the-languages","content":"This command is used to generate the l10n file at the path assets/assets/l1on/ so that we can use it in the project. morpheme l10n  tip Use this command when there is a change in the l10n file.Especially for vscode users, to make it easier to process l10n files, we can use the extension i10n arb editor, don't forget to save and use the command above after making changes. (This tips only works for non spesific .arb or single .arb file) "},{"title":"Options​","type":1,"pageTitle":"l10n (Languages)","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/l10n#options","content":"morpheme l10n [arguments]  To see all available options and flags, run morpheme l10n --help. "},{"title":"Available Options​","type":1,"pageTitle":"l10n (Languages)","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/l10n#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. "},{"title":"Feature","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/feature","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Feature","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/feature#example","content":"For the example we will generate a new feature named master morpheme feature master  The feature master folder will be created automatically, we can check in features/master/  caution The feature will not be generated if the feature name we enter already exists. "},{"title":"Options​","type":1,"pageTitle":"Feature","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/feature#options","content":"morpheme feature [feature_name] [arguments]  To see all available options and flags, run morpheme feature --help. "},{"title":"Available Options​","type":1,"pageTitle":"Feature","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/feature#available-options","content":"Specific Apps Name :  Apps Name\tAlternative\tDescription-a [apps-name]\t--apps-name [apps-name]\tCreate a new feature module in apps. "},{"title":"Color2Dart","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/color2dart","content":"","keywords":""},{"title":"Setup​","type":1,"pageTitle":"Color2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/color2dart#setup","content":"first if you dont have a color2dart.yaml in color2dart/color2dart.yaml in your project you need to run morpheme color2dart init  File generated in color2dart/color2dart.yaml color2dart/color2dart.yaml # brightness can be 'light' or 'dark' light: brightness: light colors: white: &quot;#FFFFFF&quot; black: &quot;#1E1E1E&quot; grey: &quot;#979797&quot; grey1: &quot;#CFCFCF&quot; grey2: &quot;#E5E5E5&quot; grey3: &quot;#F5F5F5&quot; grey4: &quot;#F9F9F9&quot; primary: &quot;#28A0F6&quot; secondary: &quot;#FDA06C&quot; primaryLighter: &quot;#00AFC1&quot; warning: &quot;#DAB320&quot; info: &quot;#00AFC1&quot; success: &quot;#22A82F&quot; error: &quot;#D66767&quot; bgError: &quot;#FFECEA&quot; bgInfo: &quot;#DFFCFF&quot; bgSuccess: &quot;#ECFFEE&quot; bgWarning: &quot;#FFF9E3&quot; dark: brightness: dark colors: white: &quot;#1E1E1E&quot; black: &quot;#FFFFFF&quot; grey: &quot;#979797&quot; grey1: &quot;#F9F9F9&quot; grey2: &quot;#F5F5F5&quot; grey3: &quot;#E5E5E5&quot; grey4: &quot;#CFCFCF&quot; primary: &quot;#28A0F6&quot; secondary: &quot;#FDA06C&quot; primaryLighter: &quot;#00AFC1&quot; warning: &quot;#DAB320&quot; info: &quot;#00AFC1&quot; success: &quot;#22A82F&quot; error: &quot;#D66767&quot; bgError: &quot;#FFECEA&quot; bgInfo: &quot;#DFFCFF&quot; bgSuccess: &quot;#ECFFEE&quot; bgWarning: &quot;#FFF9E3&quot;  you can use MaterialColor to use Color in yaml light: brightness: light colors: blue: primary: &quot;#2196F3&quot; swatch: 50: &quot;#E3F2FD&quot; 100: &quot;#BBDEFB&quot; 200: &quot;#90CAF9&quot; 300: &quot;#64B5F6&quot; 400: &quot;#42A5F5&quot; 500: &quot;#2196F3&quot; 600: &quot;#1E88E5&quot; 700: &quot;#1976D2&quot; 800: &quot;#1565C0&quot; 900: &quot;#0D47A1&quot;  File generated now in core/lib/src/themes  "},{"title":"Usage​","type":1,"pageTitle":"Color2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/color2dart#usage","content":"To usage this theme and color you need to setup in your MaterialApp class MyApp extends StatelessWidget { const MyApp({super.key}); @override Widget build(BuildContext context) { final router = locator&lt;GoRouter&gt;(); return BlocProvider( create: (context) =&gt; GlobalCubit(), child: Builder(builder: (context) { return MaterialApp.router( title: 'Morpheme', scaffoldMessengerKey: scaffoldMessengerKey, theme: context.selectedTheme.themeData, // this, context.selectedTheme.themeData take from GlobalCubit darkTheme: context.selectedTheme.themeData, // this, context.selectedTheme.themeData take from GlobalCubit locale: context.selectedLocale, localizationsDelegates: S.localizationsDelegates, supportedLocales: S.supportedLocales, routerConfig: router, ); }), ); } }  You can change theme just like this context.changeTheme(MorphemeThemeDark()) or theme you set in your color2dart. Now to use color you need to use like this context.color.primary it take from read&lt;GlobalCubit&gt;().state.theme.color. "},{"title":"Config","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/config","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Config","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/config#options","content":"morpheme config [arguments]  To see all available options and flags, run morpheme config --help. "},{"title":"Available Options​","type":1,"pageTitle":"Config","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/config#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. Custom Target : Custom Target\tAlternative\tDescription-t [path_file]\t--target [path_file]\tThis command is used to run the application in a specific file, by default it will run the lib/main.dart file. "},{"title":"Page","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/page","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Page","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/page#example","content":"Here's an example of how you can use the morpheme page command to create a new page in the users feature module, with the feature name set to master: morpheme page users -f master  As you can see, the command has generated the following files and folders in the users feature module: lib/users/presentation/cubit/users_cubit.dart: The Cubit file for the new page.lib/users/presentation/pages/users_page.dart: The UI page file for the new page.lib/users/presentation/widgets/.gitkeep: An empty file to preserve the widgets folder.lib/users/locator.dart: The locator file for the users feature module.lib/locator.dart: The main locator file for the entire project. With these files and folders generated, you can now start adding your own code to create the new page in the users feature module.  caution Page will not be generated if: The feature that we enter does not existThe page name we entered already exists "},{"title":"Options​","type":1,"pageTitle":"Page","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/page#options","content":"morpheme page [page-name] [arguments]  To see all available options and flags, run morpheme page --help. "},{"title":"Available Options​","type":1,"pageTitle":"Page","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/page#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. Specific Apps Name :  Apps Name\tAlternative\tDescription-a [apps-name]\t--apps-name [apps-name]\tName of the apps to be added page. Specific Feature :  Specific Feature\tAlternative\tDescription-f [feature-name]\t--feature-name [feature-name]\tSpecifies the name of the feature for which the page is being created. This option is mandatory. "},{"title":"Remove Feature","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/remove-feature","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Remove Feature","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/remove-feature#example","content":"For the example we will remove feature master morpheme remove-feature master  for the feature master in the project will be deleted safely without the need to manually remove dependencies and locators that have been generated previously. "},{"title":"Remove Apps","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/remove-apps","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Remove Apps","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/remove-apps#example","content":"For the example we will remove apps driver morpheme remove-apps driver  for the apps driver in the project will be deleted safely without the need to manually remove dependencies and locators that have been generated previously. "},{"title":"Firebase","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/firebase","content":"","keywords":""},{"title":"Setup​","type":1,"pageTitle":"Firebase","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/firebase#setup","content":"In firebase have flavor and each flavor can be different project setup. morpheme.yaml ... firebase: dev: #flavor project_id: &quot;morpheme-dev&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; platform: &quot;android,ios,web&quot; #optional android_package_name: &quot;design.morpheme.dev&quot; #optional by default use from flavor[ANDROID_APPLICATION_ID] ios_bundle_id: &quot;design.morpheme.dev&quot; #optional by default use from flavor[IOS_APPLICATION_ID] web_app_id: &quot;YOUR WEB APP ID&quot; #optional stag: project_id: &quot;morpheme-stag&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; prod: project_id: &quot;morpheme&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; platform: &quot;android,ios&quot; ...  for token you need to get from firebase_cli you need install that and run firebase login:ci to get token. "},{"title":"Command​","type":1,"pageTitle":"Firebase","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/firebase#command","content":"morpheme firebase -f [flavor]  caution Ensure you already to install flutterfire or you can check with moprpheme doctor to see requirement you dont already installed. you can install flutterfire with dart pub global activate flutterfire. "},{"title":"Options​","type":1,"pageTitle":"Firebase","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/firebase#options","content":"morpheme firebase [arguments]  To see all available options and flags, run morpheme firebase --help. "},{"title":"Available Options​","type":1,"pageTitle":"Firebase","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/firebase#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tRun project on dev environment (Default) -f stag\t--flavor stag\tRun project on staging environment -f prod\t--flavor prod\tRun project on production environment "},{"title":"Analyze","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/analyze","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Analyze","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/analyze#options","content":"morpheme analyze [arguments]  To see all available options and flags, run morpheme analyze --help. "},{"title":"Available Options​","type":1,"pageTitle":"Analyze","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/analyze#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. "},{"title":"Remove Page","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/remove-page","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Remove Page","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/remove-page#example","content":"For the example we will remove page form_address in feature master. morpheme remove-page -f master form_address  "},{"title":"Options​","type":1,"pageTitle":"Remove Page","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/remove-page#options","content":"morpheme remove-page [page-name] [arguments]  To see all available options and flags, run morpheme remove-page --help. "},{"title":"Available Options​","type":1,"pageTitle":"Remove Page","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/remove-page#available-options","content":"Specific Feature :  Specific Feature\tAlternative\tDescription-f [feature-name]\t--feature-name [feature-name]\tName of the feature to be remove page. This option is mandatory. "},{"title":"Unit Test","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/unit-test","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Unit Test","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/unit-test#options","content":"morpheme unit-test [arguments]  To see all available options and flags, run morpheme unit-test --help. "},{"title":"Available Options​","type":1,"pageTitle":"Unit Test","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/unit-test#available-options","content":"Feature (Mandatory) :  Feature\tAlternative\tDescription-f dev\t--feature-name dev\tName of the feature to be added unit-test Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. "},{"title":"Format","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/format","content":"Format This command is used to perform automatic .dart file formatting, where the code that we have created will be adjusted, for example by removing unused import lines and adding cons. morpheme format ","keywords":""},{"title":"Json2Dart","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/json2dart","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Json2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/json2dart#options","content":"morpheme json2dart [arguments]  To see all available options and flags, run morpheme json2dart --help. "},{"title":"Available Options​","type":1,"pageTitle":"Json2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/json2dart#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. Specific Apps Name :  Apps Name\tAlternative\tDescription-a [apps-name]\t--apps-name [apps-name]\tGenerate spesific apps (Optional) Specific Feature :  Specific Feature\tAlternative\tDescription-f [feature-name]\t--feature-name [feature-name]\tGenerate json2dart spesific feature which has been registered in json2dart/json2dart.yaml Specific Page :  Specific Page\tAlternative\tDescription-p [page-name]\t--page-name [page-name]\tGenerate json2dart spesific page which has been registered in json2dart/json2dart.yaml must include --feature-name option Flags : App Version\tDescription--[no-]api\tSet generated models with implement api. (defaults to on) --[no-]unit-test\tGenerate unit test for api implementation. (defaults to off) --[no-]endpoint\tGenerate endpoint from path json2dart.yaml. (defaults to on) --[no-]replace\tReplace value generated. if set to false will be delete all directory generated json2dart before. (defaults to off) "},{"title":"Get","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/get","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Get","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/get#options","content":"morpheme get [arguments]  To see all available options and flags, run morpheme get --help. "},{"title":"Available Options​","type":1,"pageTitle":"Get","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/get#available-options","content":"Specific Feature :  Specific Feature\tDescription\t--[no]l10n\tGenerate l10n first before running other command. (defaults to on)\t "},{"title":"Clean","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/clean","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Clean","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/clean#options","content":"morpheme clean [arguments]  To see all available options and flags, run morpheme clean --help. "},{"title":"Available Options​","type":1,"pageTitle":"Clean","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/clean#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. Remove Lock : Remove Lock\tDescription--remove-lock\tThis flag is to remove .pubspec.lock. "},{"title":"Create","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/create","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Create","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/create#options","content":"morpheme create [arguments]  To see all available options and flags, run morpheme create --help. "},{"title":"Available Options​","type":1,"pageTitle":"Create","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/create#available-options","content":"Version Starter Kit : Version Starter Kit\tAlternative\tDescription-t [tag-version]\t--tag [tag-version]\tClone with Tag version morpheme flutter starter kit, default clone master Refactor Rename Morpheme Code : Refactor Rename Morpheme Code\tDescription--[no-]refactor\tRefactor rename morpheme name to app name --[no-]include-library\tRefactor rename morpheme name to app name include Morpheme Library use this along with argument --refactor "},{"title":"Run","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/run","content":"","keywords":""},{"title":"Default Command​","type":1,"pageTitle":"Run","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/run#default-command","content":"morpheme run  By default this command will run the project on the dev environment release version. "},{"title":"Options​","type":1,"pageTitle":"Run","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/run#options","content":"morpheme run [arguments]  To see all available options and flags, run morpheme run --help. "},{"title":"Available Options​","type":1,"pageTitle":"Run","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/run#available-options","content":"Generate l10n :  Generate l10n\tDescription\t--[no]l10n\tGenerate l10n first before running other command. (defaults to on)\t Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tRun project on dev environment (Default) -f stag\t--flavor stag\tRun project on staging environment -f prod\t--flavor prod\tRun project on production environment App Version : App Version\tDescription--debug\tRun project on debug mode (Default) --profile\tRun project on profile mode --release\tRun project on release mode (Default) Custom Target : Custom Target\tAlternative\tDescription-t [path_file]\t--target [path_file]\tThis command is used to run the application in a specific file, by default it will run the lib/main.dart file. Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. "},{"title":"Example - Custom Version​","type":1,"pageTitle":"Run","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/run#example---custom-version","content":"Debug Version morpheme run --debug Profile Version morpheme run --profile Release Version morpheme run --release  "},{"title":"Example - Custom Environment/Flavor​","type":1,"pageTitle":"Run","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/run#example---custom-environmentflavor","content":"Dev Environment morpheme run -f dev Alternative: morpheme run --flavor dev Staging Environment morpheme run -f stag Alternative: morpheme run --flavor stag Production Environment morpheme run -f prod Alternative: morpheme run --flavor prod  "},{"title":"Example - Version and Environment Combination​","type":1,"pageTitle":"Run","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/run#example---version-and-environment-combination","content":"morpheme run --release -f stag  This following command will run your app on staging environment with release mode. "},{"title":"Example - Custom Target File​","type":1,"pageTitle":"Run","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/run#example---custom-target-file","content":"morpheme run -t [url_file *optional]  Alternative: morpheme run --target [url_file *optional]  "},{"title":"Coverage","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/coverage","content":"","keywords":""},{"title":"Requirement​","type":1,"pageTitle":"Coverage","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/coverage#requirement","content":"Install lcov with follow this installation info LCOV is an extension of GCOV, a GNU tool which provides information about what parts of a program are actually executed (i.e. &quot;covered&quot;) while running a particular test case. The extension consists of a set of Perl scripts which build on the textual GCOV output to implement the following enhanced functionality: * HTML based output: coverage rates are additionally indicated using bar graphs and specific colors. * Support for large projects: overview pages allow quick browsing of coverage data by providing either a hierarchical directory structure view or a three-level detail view: directory, file and source code view. LCOV was initially designed to support Linux kernel coverage measurements, but works as well for coverage measurements on standard user space applications. check your installation with run: lcov -v  or you can run command: morpheme doctor  "},{"title":"Usage​","type":1,"pageTitle":"Coverage","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/coverage#usage","content":"This command is used to calculate our code coverage based on the tests that have been made. Code coverage will not be generated if all the tests we make have not been passed. morpheme coverage  caution morpheme coverage support for Linux and macOS. "},{"title":"Options​","type":1,"pageTitle":"Coverage","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/coverage#options","content":"morpheme coverage [arguments]  To see all available options and flags, run morpheme coverage --help. "},{"title":"Available Options​","type":1,"pageTitle":"Coverage","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/coverage#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/started","content":"","keywords":""},{"title":"Requirement​","type":1,"pageTitle":"Getting Started","url":"/morpheme-flutter-documentation/docs/morpheme_cli/started#requirement","content":"Dart SDK 3.2 - latestFlutter: 3.16.0 - latest note Dart SDK Installation Dart SDKFlutter SDK Installation Flutter SDK "},{"title":"IDE Recommendation​","type":1,"pageTitle":"Getting Started","url":"/morpheme-flutter-documentation/docs/morpheme_cli/started#ide-recommendation","content":"VSCode "},{"title":"Installations​","type":1,"pageTitle":"Getting Started","url":"/morpheme-flutter-documentation/docs/morpheme_cli/started#installations","content":"Install current version morpheme_cli by this command : dart pub global activate morpheme_cli  Make sure morpheme cli was installed, you can check by this command : morpheme -v  Output Morpheme CLI 1.0.0  If this directory is missing from your PATH, locate the file for your platform and add it. Platform\tCache locationmacOS or Linux\tHOME/.pub-cache/bin Windows*\t%LOCALAPPDATA%\\Pub\\Cache\\bin info If you want install spesific version morpheme cli you need to follow this step: dart pub global activate morpheme_cli@1.0.0  "},{"title":"Additional Tools Installations​","type":1,"pageTitle":"Getting Started","url":"/morpheme-flutter-documentation/docs/morpheme_cli/started#additional-tools-installations","content":"Install flutterfire for requirement command morpheme firebase. You can install with dart pub global activate flutterfire_cli Install gherkin for requirement command morpheme cucumber. Install gherkin executable and make sure to export to your PATH from this Gherkin Executable Install npm for requirement command morpheme cucumber to generate report integration test. You can follow installation in nodejs Install lcov for requirement command morpheme coverage. Install lcov with follow this installation "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/morpheme-flutter-documentation/docs/morpheme_cli/started#usage","content":"To use the Morpheme CLI, you must run the morpheme command from the terminal on your project directory. caution This CLI can only be used on Morpheme Flutter Starter Kit, please clone it first and configure it based on the documentation on the following link Morpheme Flutter Starter Kit "},{"title":"Upgrade","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/upgrade","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Upgrade","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/upgrade#options","content":"morpheme upgrade [argument]  To see all available options and flags, run morpheme upgrade --help. "},{"title":"Available Options​","type":1,"pageTitle":"Upgrade","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/upgrade#available-options","content":"Flag : Flag\tAlternative\tDescription-a\t--all\tUpgrade all project package's dependencies to latest versions -d\t--dependency\tUpgrade all dependency_manager package's dependencies to latest versions -g\t--morpheme\tUpgrade all morpheme_library package's dependencies to latest versions (Default) Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. "},{"title":"Changelog","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/tools/changelog","content":"Changelog This command is used to get latest changelog from CHANGELOG.md. morpheme changelog CHANGELOG.md ## 1.1.0 - style: add layout featurname - feat: integrate featurename with apiname ## 1.0.1 - docs: update readme.md ## 1.0.0 - Initial version. Output - style: add layout featurname - feat: integrate featurename with apiname ","keywords":""},{"title":"Test","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/test","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Test","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/test#options","content":"morpheme test [arguments]  To see all available options and flags, run morpheme test --help. "},{"title":"Available Options​","type":1,"pageTitle":"Test","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/test#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. Run Spesific Feature :  Run Spesific Feature\tAlternative\tDescription-f [feature-name]\t--feature [feature-name]\tTest with spesific feature "},{"title":"Refactor","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/refactor","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Refactor","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/refactor#options","content":"morpheme refactor --old-name [old-name] --new-name [new-name] [arguments]  To see all available options and flags, run morpheme refactor --help. "},{"title":"Available Options​","type":1,"pageTitle":"Refactor","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/refactor#available-options","content":"Options : Options\tDescription--exclude-changes [code-exclude-changes]\tCode will exclude to refactor separate with , (coma) --exclude-files [path-files]\tSpesific path file will exclude to refactor both code and filename separate with , (coma) --exclude-directories [path-directories]\tSpesific path directory will exclude to refactor including files and codes in it separate with , (coma) Flags : Flags\tDescription--[no-]include-library\tRefactor rename morpheme name to app name include Morpheme Library, by default false "},{"title":"Cucumber","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/cucumber","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/cucumber#installation","content":"Requirement Install Flutter and another installation e.g Android Studio, Xcode. you can check in this command: flutter doctor After install Flutter then install morpheme_cli with command: dart pub global activate morpheme_cli now you can run this command to check: morpheme_cli doctor If this directory is missing from your PATH, locate the file for your platform and add it. Platform\tCache locationmacOS or Linux\tHOME/.pub-cache/bin Windows*\t%LOCALAPPDATA%\\Pub\\Cache\\bin Install gherkin executable and make sure to export to your PATH from this Gherkin Executable Install nodejs for generate cucumber json to report html NodeJs Congratulation now you are ready for Instant Integration Test 🎉🎉🎉 "},{"title":"How to Run​","type":1,"pageTitle":"Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/cucumber#how-to-run","content":"First connect your device to your machine or open emulator / simulator Install dependency with command: morpheme_cli get  Once your done installation, then run command: morpheme_cli cucumber  or your need to be specific feature you can do run command: morpheme_cli cucumber login  or multiple morpheme_cli cucumber login,register,home  by default run integration_test/cucumber_test.dart by flavor dev. if you want to running flavor stag or prod just add argument --flavor stag or --flavor prod example run flavor stag morpheme_cli cucumber --flavor stag  "},{"title":"Options​","type":1,"pageTitle":"Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/cucumber#options","content":"morpheme cucumber [arguments]  To see all available options and flags, run morpheme cucumber --help. "},{"title":"Available Options​","type":1,"pageTitle":"Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/cucumber#available-options","content":"Custom Morpheme Yaml : Custom Morpheme Yaml\tDescription--morpheme-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the morpheme.yaml file. Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tRun project on dev environment (Default) -f stag\t--flavor stag\tRun project on staging environment -f prod\t--flavor prod\tRun project on production environment Generate l10n :  Generate l10n\tDescription\t--[no]l10n\tGenerate l10n first before running other command. (defaults to on)\t "},{"title":"Morpheme Cached Network Image","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cached_netwrok_image","content":"","keywords":""},{"title":"How to use​","type":1,"pageTitle":"Morpheme Cached Network Image","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cached_netwrok_image#how-to-use","content":"The MorphemeCachedNetworkImage can be used directly or through the ImageProvider. Need to Hive.init in first main. void main() async { WidgetsFlutterBinding.ensureInitialized(); if(!kIsWeb) Hive.init((await getApplicationDocumentsDirectory()).path); runApp(const MyApp()); }  With a loading: MorphemeCachedNetworkImage( imageUrl: 'https://picsum.photos/id/2/200', loadingBuilder: (context) =&gt; const CircularProgressIndicator(), errorBuilder: (context, error, stackTrace) =&gt; const Icon(Icons.error), );  Image(image: MorphemeCachedNetworkImageProvider(url))  When you want to set as background you can do with container: Container( width: 200, height: 200, decoration: BoxDecoration( image: DecorationImage( image: MorphemeCachedNetworkImageProvider( 'https://picsum.photos/id/2/200', ), ), ), ),  "},{"title":"Unused-l10n","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/project/unused-l10n","content":"Unused-l10n This command aims to find the l10n key that is not used in the code. morpheme unused-l10n info This command only displays unused l10n keys, not to delete unused l10n keys. Output if no unused l10n key is found: Checking unused l10n 📦 Total Packages: 12 --------------------------------------- Total unused: 0 unused-l10n SUCCESS Output if an unused l10n key is found: Checking unused l10n 📦 Total Packages: 12 --------------------------------------- Total unused: 6 --------------------------- messageOnboarding1 messageOnboarding2 messageOnboarding3 titleOnboarding1 titleOnboarding2 titleOnboarding3 unused-l10n SUCCESS here the results obtained are 6 namely messageOnboarding1, messageOnboarding2, messageOnboarding3, titleOnboarding1, titleOnboarding2 &amp; titleOnboarding3. You can find out which l10n key is not used, so you can take the next action whether to delete it or use it at a later time.","keywords":""},{"title":"Init","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/tools/init","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Init","url":"/morpheme-flutter-documentation/docs/morpheme_cli/tools/init#options","content":"morpheme init [arguments]  To see all available options and flags, run morpheme init --help. "},{"title":"Available Options​","type":1,"pageTitle":"Init","url":"/morpheme-flutter-documentation/docs/morpheme_cli/tools/init#available-options","content":"App Name : App Name\tDescription--app-name [app-name]\tDefine application name in generate morpheme.yaml "},{"title":"Morpheme Inspector","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_inspector","content":"","keywords":""},{"title":"Supported​","type":1,"pageTitle":"Morpheme Inspector","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_inspector#supported","content":"Morpheme HTTP "},{"title":"Feature​","type":1,"pageTitle":"Morpheme Inspector","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_inspector#feature","content":"Detailed logs for each HTTP calls (HTTP Request, HTTP Response)Inspector UI for viewing HTTP callsSave HTTP calls to SqfliteNotification on HTTP callSupport for top used HTTP clients in DartShake to open inspectorHTTP calls search "},{"title":"How to Usage​","type":1,"pageTitle":"Morpheme Inspector","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_inspector#how-to-usage","content":"locator.registerLazySingleton( () =&gt; MorphemeInspector( showNotification: true, // default true showInspectorOnShake: true, // default true saveInspectorToLocal: true, // default true notificationIcon: '@mipmap/ic_launcher', // default '@mipmap/ic_launcher' just for android ), ); locator.registerLazySingleton( () =&gt; MorphemeHttp( timeout: 30000, showLog: true, morphemeInspector: locator(), // add this for activate inspector in Morpheme HTTP ), );  to help navigate without context to the morpheme inspector page it is necessary to setup the navigator state with the method setNavigatorState(Navigator.of(context)) and is recommended on start pages like SplashPage. class SplashPage extends StatefulWidget { const SplashPage({Key? key}) : super(key: key); @override State&lt;SplashPage&gt; createState() =&gt; _SplashPageState(); } class _SplashPageState extends State&lt;SplashPage&gt; { @override void initState() { super.initState(); locator&lt;MorphemeInspector&gt;().setNavigatorState(Navigator.of(context)); // add this to navigate from local notification or on shake ... } ... }  "},{"title":"Quick Start","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/quick_start","content":"","keywords":""},{"title":"Requirement​","type":1,"pageTitle":"Quick Start","url":"/morpheme-flutter-documentation/docs/quick_start#requirement","content":"Dart SDK 3.2 - latestFlutter: 3.16.0 - latest "},{"title":"Installations​","type":1,"pageTitle":"Quick Start","url":"/morpheme-flutter-documentation/docs/quick_start#installations","content":"Install current version morpheme_cli by this command : dart pub global activate morpheme_cli  "},{"title":"Create Project With Morpheme CLI​","type":1,"pageTitle":"Quick Start","url":"/morpheme-flutter-documentation/docs/quick_start#create-project-with-morpheme-cli","content":"You can create Flutter applcation with Morpheme FLutter Starter Kit with run command: morpheme create [project-name]  "},{"title":"Run Project​","type":1,"pageTitle":"Quick Start","url":"/morpheme-flutter-documentation/docs/quick_start#run-project","content":"Before you run the project you need to run this command morpheme init // generate morpheme.yaml morpheme config // generate setting vscode morpheme get // download dependencies  Now you can run the project with command morpheme run  "},{"title":"Morpheme Responsive","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_responsive","content":"","keywords":""},{"title":"Getting Started​","type":1,"pageTitle":"Morpheme Responsive","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_responsive#getting-started","content":"Wrap your MaterialApp widget with MorphemeResponsive.builder to enable responsive design. import 'package:flutter/material.dart'; import 'package:morpheme_responsive/morpheme_responsive.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( builder: (context, child) =&gt; MorphemeResponsive.builder( breakpoints: const [ MorphemeBreakpoint.mobile(), MorphemeBreakpoint.tablet(), MorphemeBreakpoint.desktop(), ], child: child, ), initialRoute: &quot;/&quot;, // Add your routes and other MaterialApp configurations here. ); } }  "},{"title":"Breakpoints​","type":1,"pageTitle":"Morpheme Responsive","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_responsive#breakpoints","content":"This package provides three default breakpoints: Mobile: Suitable for small screens like phones.Tablet: Ideal for medium-sized screens like tablets.Desktop: Designed for large screens like desktops. You can customize the breakpoints based on your application's needs. for widthDesign and heightDesign set to be potrait. MorphemeResponsive.builder( breakpoints: const [ MorphemeBreakpoint(start: 0, end: 599, widthDesign: 360, heightDesign: 800, target: MorphemeResponsiveTarget.mobile,), // Custom mobile breakpoint MorphemeBreakpoint(start: 600, end: 1199, widthDesign: 834, heightDesign: 1194, target: MorphemeResponsiveTarget.tablet,), // Custom tablet breakpoint MorphemeBreakpoint(start: 1200, end: double.infinity, widthDesign: 1024, heightDesign: 1440, target: MorphemeResponsiveTarget.desktop,), // Custom desktop breakpoint ], child: child, ),  "},{"title":"Contributing​","type":1,"pageTitle":"Morpheme Responsive","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_responsive#contributing","content":"If you find any issues or have suggestions for improvement, feel free to open an issue or create a pull request on GitHub. "},{"title":"License​","type":1,"pageTitle":"Morpheme Responsive","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_responsive#license","content":"This project is licensed under the BSD 3-Clause License - see the LICENSE file for details. "},{"title":"Doctor","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/tools/doctor","content":"Doctor This command is used to show information about the installed tooling. morpheme doctor Doctor check flutter doctor, lcov and gherkin installation. Output [✓] Flutter installed Doctor summary (to see all details, run flutter doctor -v): [✓] Flutter (Channel stable, 3.16.9, on macOS 13.0 22A380 darwin-arm64, locale en-ID) [✓] Android toolchain - develop for Android devices (Android SDK version 33.0.0) [✓] Xcode - develop for iOS and macOS (Xcode 14.3.1) [✓] Chrome - develop for the web [✓] Android Studio (version 2022.2) [✓] VS Code (version 1.86.2) [✓] Connected device (2 available) [✓] Network resources • No issues found! [✓] flutterfire installed flutterfire use for 'morpheme firebase' command [✓] Gherkin installed gherkin use for 'morpheme cucumber' command [✓] npm installed npm use for create report integration test after 'morpheme cucumber' command [✓] lcov installed lcov use for 'morpheme coverage' command ","keywords":""},{"title":"Assets","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/assets","content":"","keywords":""},{"title":"Usages​","type":1,"pageTitle":"Assets","url":"/morpheme-flutter-documentation/docs/starter_kit/assets#usages","content":"Here are the steps for creating a logo.png image file as an example: Add the logo files to the assets/assets/images/ folder Generate constants with the Morpheme CLI command: morpheme assets Learn more about command assets here The logo constant will be generated in the core/assets/lib/morpheme_images.dart file info Adjust the placement of the assets that we use Image file path assets/assets/images/ constant will be generated in the file core/assets/lib/morpheme_images.dartThe file path icon assets/assets/icons/ constant will be generated in the file core/assets/lib/morpheme_icons.dartThe path of the json file assets/assets/json/ constant will be generated in the file core/assets/lib/morpheme_json.dart Now you can use MorphemeImages.logo in your code Image.asset(MorphemeImages.logo);  "},{"title":"Concepts","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/concepts","content":"","keywords":""},{"title":"Tech Stack​","type":1,"pageTitle":"Concepts","url":"/morpheme-flutter-documentation/docs/starter_kit/concepts#tech-stack","content":"Morpheme Flutter Starter Kit built using the following major dependencies: Morpheme CLIMorpheme BaseMorpheme HTTPMorpheme InspectorMorpheme ExtensionGoogle FontsFlutter BlocGo RouterGet ItFlutter Secure StorageEquatableCollectionMocktailBloc Test "},{"title":"Folder Structure​","type":1,"pageTitle":"Concepts","url":"/morpheme-flutter-documentation/docs/starter_kit/concepts#folder-structure","content":"Overall Folder Structure . ├── android # Android native directory ├── assets # Module assets │ ├── assets # Assets directory │ ├── lib # Assets source code directory ├── core # Module core │ ├── lib │ │ ├── src │ │ │ ├── components # Global components │ │ │ ├── constants # Global constants │ │ │ ├── extensions # Global extensions │ │ │ ├── firebase # Firebase helper │ │ │ ├── helper # Global helper │ │ │ ├── l10n # Localization (generated with morpheme l10n) │ │ │ ├── shared # Global shared class │ │ │ ├── test # Global helper test │ │ │ ├── themes # Global themes style │ │ │ ├── environment.dart # Environment data from --dart-define │ │ │ ├── global_variable.dart # Global variable may used in feature module │ │ │ ├── locator.dart # Service locator core │ │ ├── core_test.dart # Identity library core test │ │ ├── core.dart # Identity library core │ ├── packages │ │ ├── dependency_manager # Module global dependencies │ │ ├── morpheme_library # Specific dependencies from morpheme_library │ ├── test # Core unit test &amp; widget test ├── features # Modules feature directory │ ├── auth # Auth's modules (example) │ ├── home # Home's modules (example) ├── ios # iOS native directory ├── json2dart # Json2dart directory │ ├── json │ │ ├── body # Parameter body api in json │ │ ├── response # Response api in json │ ├── json2dart.yaml # Main file to control generate json2dart ├── lib │ ├── main │ │ ├── main_page.dart # Main pages │ ├── routes # Routes with Go Router │ ├── locator.dart # Routes with Go Router │ ├── main.dart # Service locator main (auto generated) ├── morpheme.yaml # Main environtment variable └── ...  Feature Folder Structure (Example) ┌── ... ├── features # Modules feature directory │ ├── auth # Auth's modules (example) │ │ ├── lib │ │ │ ├── login # Login's page (example) │ │ │ │ ├── data # Data layer │ │ │ │ │ ├── datasources # Datasource implementation (auto generated) │ │ │ │ │ ├── models # Data model body and response (auto generated) │ │ │ │ │ ├── repositories # Implementation repositories (auto generated) │ │ │ │ ├── domain # Domain layer │ │ │ │ │ ├── entities # Entity take from response (auto generated) │ │ │ │ │ ├── repositories # Contract repositories (auto generated) │ │ │ │ │ ├── usecases # Usecase implementation (auto generated) │ │ │ │ ├── presentation # Presentation layer │ │ │ │ │ ├── bloc # Implementation bloc for fetch api (auto generated) │ │ │ │ │ ├── cubit # Controller with Cubit │ │ │ │ │ ├── pages # Pages directory │ │ │ │ │ ├── widgets # Widgets directory for login page │ │ │ │ ├── locator.dart # Service locator login page (auto generated) │ │ │ │ ├── mapper.dart # Mapper models to entities vice versa (auto generated) │ │ │ ├── locator.dart # Service locator auth (auto generated) │ │ ├── test # Auth's unit test &amp; widget test └── ...  "},{"title":"Config (morpheme.yaml)​","type":1,"pageTitle":"Concepts","url":"/morpheme-flutter-documentation/docs/starter_kit/concepts#config-morphemeyaml","content":"Like the .env morpheme.yaml aims to save the config environment will be ignored and keep secret only the team in the project has the right to get the morpheme.yaml. "},{"title":"Core​","type":1,"pageTitle":"Concepts","url":"/morpheme-flutter-documentation/docs/starter_kit/concepts#core","content":"The core module is a reusable code that is used in all features. Core module has additional dependencies on packages: Dependency Manage : All third party dependency except Morpheme LibraryMorpheme Library : Dependency from Morpheme "},{"title":"Internationalization​","type":1,"pageTitle":"Concepts","url":"/morpheme-flutter-documentation/docs/starter_kit/concepts#internationalization","content":"Internationalization location in assets/assets/l10n and will generated to core/lib/src/l10n with official tools flutter gen-l10n and simplied with Morpheme CLI command morpheme l10n. Learn more about Internationalization here "},{"title":"Pattern​","type":1,"pageTitle":"Concepts","url":"/morpheme-flutter-documentation/docs/starter_kit/concepts#pattern","content":"BLoC PatternClean ArchitectureTDD PatternSolid Pattern "},{"title":"Local2Dart","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart","content":"","keywords":""},{"title":"Sturcture local2dart.yaml​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#sturcture-local2dartyaml","content":"version: 1 dir_database: &quot;morpheme&quot; foreign_key_constrain_support: true table: example_category: create_if_not_exists: true column: id: type: &quot;INTEGER&quot; constraint: &quot;PRIMARY KEY&quot; autoincrement: true name: type: &quot;TEXT&quot; nullable: false example: create_if_not_exists: true column: id: type: &quot;INTEGER&quot; constraint: &quot;PRIMARY KEY&quot; autoincrement: true name: type: &quot;TEXT&quot; nullable: false example_category_id: type: &quot;INTEGER&quot; nullable: false foreign: example_category_id: to_table: &quot;example_category&quot; to_column: &quot;id&quot; on_update: &quot;CASCADE&quot; on_delete: &quot;CASCADE&quot; query: table_name: custom_query_name: disticnt: boolean by default value is false column: example_id: type: &quot;INTEGER&quot; origin: &quot;id&quot; example_name: type: &quot;TEXT&quot; origin: &quot;name&quot; example_total: type: &quot;INT&quot; origin: &quot;SUM(quantity)&quot; example_count: type: &quot;INT&quot; origin: &quot;count(*)&quot; join: - &quot;INNER JOIN example ON example.id = table_name.example_id&quot; where: &quot;create_at BEETWEEN ? AND ?&quot; group_by: &quot;example_id&quot; order_by: &quot;&quot; limit: 10 offset: 0 having: &quot;&quot; seed: status: column: - &quot;id&quot; - &quot;name&quot; value: - &quot;1,pending&quot; - &quot;2,onprogress&quot; - &quot;3,done&quot; - &quot;4,cancel&quot; view: view_name: create_if_not_exists: bool, by default is true disticnt: boolean by default value is false column: example_id: type: &quot;INTEGER&quot; origin: &quot;id&quot; example_name: type: &quot;TEXT&quot; origin: &quot;name&quot; example_total: type: &quot;INT&quot; origin: &quot;SUM(quantity)&quot; example_count: type: &quot;INT&quot; origin: &quot;count(*)&quot; from: table_name join: - &quot;INNER JOIN example ON example.id = table_name.example_id&quot; where: &quot;create_at BEETWEEN ? AND ?&quot; group_by: &quot;example_id&quot; order_by: &quot;&quot; limit: 10 offset: 0 having: &quot;&quot; trigger: example: raw_sql: &gt; CREATE TRIGGER [IF NOT EXISTS] trigger_name [BEFORE|AFTER|INSTEAD OF] [INSERT|UPDATE|DELETE] ON table_name [WHEN condition] BEGIN statements; END;  "},{"title":"Version​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#version","content":"Determine the version of the database if you add and replace existing tables in the database, the version must be added to avoid conflicts. "},{"title":"Dir Database​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#dir-database","content":"Directory for open database by default value is morpheme, recommendation to replace from this database by using the project name. "},{"title":"Foreign Key Constrain Support​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#foreign-key-constrain-support","content":"SQLite has supported foreign key constraint since version 3.6.19. The SQLite library must also be compiled with neither SQLITE_OMIT_FOREIGN_KEY nor SQLITE_OMIT_TRIGGER. foreign_key_constrain_support is boolean if you set foreign_key_constrain_support true then: PRAGMA foreign_keys = ON;  otherwise PRAGMA foreign_keys = OFF;  Learn more about Foreign Key Constrain Support here "},{"title":"Table​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#table","content":"For all naming use snake_case. table: table_name: create_if_not_exists: bool, by default is true column: column_name: type: INTEGER, REAL, TEXT, BLOB, BOOL constraint: PRIMARY KEY, FOREIGN KEY, UNIQUE, CHECK (optional) autoincrement: boolean by default value is null (optional) nullable: boolean by default value is true (optional) default: Default value if insert with null (optional) foreign: column_name: to_table: references table to_column: references column on_update: constraint actions values SET NULL, SET DEFAULT, RESTRICT, NO ACTION, CASCADE (optional) on_update: constraint actions values SET NULL, SET DEFAULT, RESTRICT, NO ACTION, CASCADE (optional)  Column​ To use column_name you can use 2 ways: Directly using the data type column: id: INTEGER name: TEXT description: TEXT More specific column: id: type: INTEGER constraint: &quot;PRIMARY KEY&quot; autoincrement: true name: type: TEXT nullable: false description: TEXT  You can also combine the two methods according to your needs. Foreign​ To use this foreign in the column there must be a column_name that will be used as a foreign key. column: category: create_if_not_exists: true column: id: type: &quot;INTEGER&quot; constraint: &quot;PRIMARY KEY&quot; autoincrement: true name: type: &quot;TEXT&quot; nullable: false todo: create_if_not_exists: true column: id: type: &quot;INTEGER&quot; constraint: &quot;PRIMARY KEY&quot; autoincrement: true name: type: &quot;TEXT&quot; nullable: false category_id: type: &quot;INTEGER&quot; nullable: false foreign: category_id: to_table: &quot;category&quot; to_column: &quot;id&quot; on_update: &quot;CASCADE&quot; on_delete: &quot;CASCADE&quot;  "},{"title":"Query​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#query","content":"Query is used if you need a custom query other than the one provided by default from generate. Without join: query: table_name: custom_query_name: disticnt: boolean by default value is false column: id: type: &quot;INTEGER&quot; origin: &quot;id&quot; name: type: &quot;TEXT&quot; origin: &quot;name&quot; total: type: &quot;INT&quot; origin: &quot;SUM(quantity)&quot; count: type: &quot;INT&quot; origin: &quot;count(*)&quot; where: &quot;create_at BEETWEEN ? AND ?&quot; group_by: &quot;example_id&quot; order_by: &quot;&quot; limit: 10 offset: 0 having: &quot;&quot;  With join: query: table_name: custom_query_name: disticnt: boolean by default value is false column: id: type: &quot;INTEGER&quot; origin: &quot;table_name.id&quot; example_id: type: &quot;INTEGER&quot; origin: &quot;example.id&quot; name: type: &quot;TEXT&quot; origin: &quot;table_name.name&quot; total: type: &quot;INT&quot; origin: &quot;SUM(table_name.quantity)&quot; count: type: &quot;INT&quot; origin: &quot;count(*)&quot; join: - &quot;INNER JOIN example ON example.id = table_name.example_id&quot; where: &quot;create_at BEETWEEN ? AND ?&quot; group_by: &quot;example_id&quot; order_by: &quot;&quot; limit: 10 offset: 0 having: &quot;&quot;  In this case, the difference is if you join with another table, then in origin use the table_name. prefix to determine which column to know from which table to avoid conflicts with the same column name. "},{"title":"Seed​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#seed","content":"Seed is used if you want to create seed data when the database creation data has been inserted without having to do it manually. For example here we have a table called status and the status we want already has data when we create the database. seed: status: column: - &quot;id&quot; - &quot;name&quot; value: - &quot;1,pending&quot; - &quot;2,onprogress&quot; - &quot;3,done&quot; - &quot;4,cancel&quot;  "},{"title":"View​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#view","content":"View is used to create a view of the table, the declaration is almost the same as Query except that there is an addition of from which is used to determine from which table the data is retrieved. view: view_name: create_if_not_exists: bool, by default is true disticnt: boolean by default value is false column: example_id: type: &quot;INTEGER&quot; origin: &quot;id&quot; example_name: type: &quot;TEXT&quot; origin: &quot;name&quot; example_total: type: &quot;INT&quot; origin: &quot;SUM(quantity)&quot; example_count: type: &quot;INT&quot; origin: &quot;count(*)&quot; from: table_name join: - &quot;INNER JOIN example ON example.id = table_name.example_id&quot; where: &quot;create_at BEETWEEN ? AND ?&quot; group_by: &quot;example_id&quot; order_by: &quot;&quot; limit: 10 offset: 0 having: &quot;&quot;  "},{"title":"Trigger​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#trigger","content":"If you want to add a trigger to the database for the trigger here use raw_sql so you are more flexible in defining it. trigger: example: raw_sql: &gt; CREATE TRIGGER [IF NOT EXISTS] trigger_name [BEFORE|AFTER|INSTEAD OF] [INSERT|UPDATE|DELETE] ON table_name [WHEN condition] BEGIN statements; END;  Learn more about Trigger here "},{"title":"Result Generate​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#result-generate","content":"The result of generating local2dart will be a new module inside core/packages/local2dart, don't forget to add export 'package:local2dart/local2dart.dart'; in core/lib/core.dart. "},{"title":"Available Method in Service​","type":1,"pageTitle":"Local2Dart","url":"/morpheme-flutter-documentation/docs/morpheme_cli/generate/local2dart#available-method-in-service","content":"countgetgetWithPaginationgetByIdinsertbulkInsertupsertupdatebulkUpdateupdateByIdbulkUpdateByIddeletebulkDeletedeleteByIdbulkDeleteById "},{"title":"Changelog","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/changelog","content":"","keywords":""},{"title":"1.0.0​","type":1,"pageTitle":"Changelog","url":"/morpheme-flutter-documentation/docs/starter_kit/changelog#100","content":"Initial version. "},{"title":"Coverage","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/coverage","content":"","keywords":""},{"title":"Requirement​","type":1,"pageTitle":"Coverage","url":"/morpheme-flutter-documentation/docs/starter_kit/coverage#requirement","content":"Install lcov with follow this installation info LCOV is an extension of GCOV, a GNU tool which provides information about what parts of a program are actually executed (i.e. &quot;covered&quot;) while running a particular test case. The extension consists of a set of Perl scripts which build on the textual GCOV output to implement the following enhanced functionality: * HTML based output: coverage rates are additionally indicated using bar graphs and specific colors. * Support for large projects: overview pages allow quick browsing of coverage data by providing either a hierarchical directory structure view or a three-level detail view: directory, file and source code view. LCOV was initially designed to support Linux kernel coverage measurements, but works as well for coverage measurements on standard user space applications. check your installation with run: lcov -v  or you can run command: morpheme doctor  "},{"title":"Usage​","type":1,"pageTitle":"Coverage","url":"/morpheme-flutter-documentation/docs/starter_kit/coverage#usage","content":"This command is used to calculate our code coverage based on the tests that have been made. Code coverage will not be generated if all the tests we make have not been passed. morpheme coverage  caution morpheme coverage support for Linux and macOS. "},{"title":"Morpheme Base","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_base","content":"","keywords":""},{"title":"MorphemeStatePage dan MorphemeCubit (State Management)​","type":1,"pageTitle":"Morpheme Base","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_base#morphemestatepage-dan-morphemecubit-state-management","content":"To use morpheme base you can use StatefullWidget and in the class extends State add the mixin with MorphemeStatePage&lt;T extends StatefullWidget, C extends MorphemeCubit&gt;. Methods that need to be overridden setCubit and buildWidget. the build method is deprecated when using with MorphemeStatepage and is replaced by buildWidget. "},{"title":"Example​","type":1,"pageTitle":"Morpheme Base","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_base#example","content":"import 'package:core/core.dart'; import 'package:flutter/material.dart'; import 'package:onboarding/widgets/widgets.dart'; import '../cubit/onboarding_cubit.dart'; class OnboardingPage extends StatefulWidget { const OnboardingPage({Key? key}) : super(key: key); @override State&lt;OnboardingPage&gt; createState() =&gt; _OnboardingPageState(); } class _OnboardingPageState extends State&lt;OnboardingPage&gt; with MorphemeStatePage&lt;OnboardingPage, OnboardingCubit&gt; { @override OnboardingCubit setCubit() =&gt; locator(); @override Widget buildWidget(BuildContext context) { return Scaffold( body: Stack( children: [ PageView( controller: cubit.pageController, onPageChanged: cubit.onPageChange, children: cubit.listOnboarding, ), const Positioned( left: MorphemeSizes.s16, right: MorphemeSizes.s16, bottom: MorphemeSizes.s16, child: OnboardingButton(), ), ], ), ); } }  To use MorphemeCubit first we need State from the data class which added the copyWith method to replace the variables in State. part of 'onboarding_cubit.dart'; class OnboardingStateCubit extends Equatable { const OnboardingStateCubit({ required this.selected, required this.isLast, }); final int selected; final bool isLast; OnboardingStateCubit copyWith({ int? selected, bool? isLast, }) { return OnboardingStateCubit( selected: selected ?? this.selected, isLast: isLast ?? this.isLast, ); } @override List&lt;Object?&gt; get props =&gt; [selected, isLast]; // add all variables to list props }  MorphemeCubit is a controller for all the logic that will be used, by creating a class with extends MorphemeCubit&lt;State&gt; in the constructor must call super(State()) to give the initial value to State. import 'package:core/core.dart'; import 'package:flutter/material.dart'; import '../widgets/onboarding.dart'; part 'onboarding_state.dart'; class OnboardingCubit extends MorphemeCubit&lt;OnboardingStateCubit&gt; { OnboardingCubit() : super(const OnboardingStateCubit( // must call super with value initial state selected: 0, isLast: false, )); ... @override void initState(BuildContext context) async {} @override void initAfterFirstLayout(BuildContext context) {} @override List&lt;BlocProvider&gt; blocProviders(BuildContext context) =&gt; []; @override List&lt;BlocListener&gt; blocListeners(BuildContext context) =&gt; []; @override void dispose() {} void onPageChange(int value) =&gt; emit(state.copyWith( selected: value, isLast: value == listOnboarding.length - 1, )); ... }  here's an example of using MorphemeCubit with bloc to fetch data to api on login_cubit.dart. import 'package:core/core.dart'; import 'package:flutter/foundation.dart'; import 'package:flutter/material.dart'; import '../../data/models/body/login_body.dart'; import '../bloc/login/login_bloc.dart'; part 'login_state.dart'; class LoginCubit extends MorphemeCubit&lt;LoginStateCubit&gt; { LoginCubit({required this.loginBloc}) : super(LoginStateCubit()); final LoginBloc loginBloc; ... @override List&lt;BlocProvider&gt; blocProviders(BuildContext context) =&gt; [ BlocProvider&lt;LoginBloc&gt;(create: (context) =&gt; loginBloc), ]; @override List&lt;BlocListener&gt; blocListeners(BuildContext context) =&gt; [ BlocListener&lt;LoginBloc, LoginState&gt;(listener: _listenerLogin), ]; @override void dispose() { try { loginBloc.close(); } catch (e) { if (kDebugMode) print(e.toString()); } } ... void onLoginWithEmailPressed(BuildContext context) { _setValidate(); if (_isValidEmailPassword()) { _fetchLogin(LoginBody(email: emailKey.text, password: passwordKey.text)); } } ... void _fetchLogin(LoginBody body) { loginBloc.add(FetchLogin(body)); } void _listenerLogin(BuildContext context, LoginState state) { if (state is LoginFailed) { state.failure.showSnackbar(context); } else if (state is LoginSuccess) { context.go(MorphemeRoutes.main); } } }  initState : same method on StatefullWidget when doing initState.initAfterFirstLayout : method that is called when the application finishes rendering what is in the build widget.blocProviders : initialize bloc to be used in this method.blocListeners : catch callback of state bloc which will be listened when state bloc moves to another state.dispose : same method on StatefullWidget when doing dispose.emit : method used to change state and reactive change UI that requires state. for pages that need reactive data from MorphemeCubit we can do the extensions context.select and context.watch and call them in build. then as for context.read is used to call methods that are in MorphemeCubit and are not listeners, for complete documentation it is in bloclibrary.dev. context.select : listen for changes to a selected variable from MorphemeCubit or from State MorphemeCubit. // fetch data from OnboardingCubit final listOnboarding = context.select((OnboardingCubit element) =&gt; element.listOnboarding); // fetch data from OnboardingCubit state final selected = context.select((OnboardingCubit element) =&gt; element.state.selected);  context.watch : listen for State changes, usually used to listen for State fetch API changes starting from Initial, Loading, Succss &amp; Failed. final watchLoginState = context.watch&lt;LoginBloc&gt;().state; ... MorphemeButton.elevated( isLoading: watchLoginState is LoginLoading, text: context.s.loginWithEmail, onPressed: () =&gt; context.read&lt;LoginCubit&gt;().onLoginWithEmailPressed(context), )  context.read : usually used for calling methods in MorphemeCubit. MorphemeButton.elevated( isLoading: watchLoginState is LoginLoading, text: context.s.loginWithEmail, onPressed: () =&gt; context.read&lt;LoginCubit&gt;().onLoginWithEmailPressed(context), )  and the following is an example of implementing state management on onboarding_button.dart import 'package:core/core.dart'; import 'package:flutter/material.dart'; import 'package:onboarding/cubit/onboarding_cubit.dart'; import 'package:onboarding/widgets/indicator.dart'; class OnboardingButton extends StatelessWidget { const OnboardingButton({Key? key}) : super(key: key); @override Widget build(BuildContext context) { final listOnboarding = context.select((OnboardingCubit element) =&gt; element.listOnboarding); final selected = context.select((OnboardingCubit element) =&gt; element.state.selected); final isLast = context.select((OnboardingCubit element) =&gt; element.state.isLast); return Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ isLast ? const SizedBox(width: 100) : MorphemeButton.text( isExpand: false, text: context.s.skip, style: TextButton.styleFrom( minimumSize: const Size.fromWidth(100), ), onPressed: context.read&lt;OnboardingCubit&gt;().onSkipPressed, ), Indicator(length: listOnboarding.length, selected: selected), MorphemeButton.elevated( text: isLast ? context.s.started : context.s.next, isExpand: false, style: ElevatedButton.styleFrom( minimumSize: const Size.fromWidth(100), ), onPressed: () =&gt; context.read&lt;OnboardingCubit&gt;().onNextPressed(context), ), ], ); } }  "},{"title":"Morpheme Cucumber","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Morpheme Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber#installation","content":"installation morpheme_cli dart pub global activate morpheme_cli  installation morpheme flutter in your project morpheme create  "},{"title":"Morpheme Cli​","type":1,"pageTitle":"Morpheme Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber#morpheme-cli","content":"Now you done for setup all MorphemeCucumber then you can call morpheme command: First init to create morpheme.yaml morpheme init  Then download all dependency with morpheme get morpheme get  Last you can run cucumber command morpheme cucumber  by default run integration_test/cucumber_test.dart by flavor dev. if you want to running flavor stag or prod just add argument --flavor stag or --flavor prod "},{"title":"Usage​","type":1,"pageTitle":"Morpheme Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber#usage","content":"To use morpheme_cucumber create file cucumber_test.dart in your integration_test directory. Then import it: import 'package:morpheme_cucumber/morpheme_cucumber.dart';  Once imported, you can write widget tests: integration_test/cucumber_test.dart import 'support/cucumber_config.dart'; import 'support/cucumber_hook.dart'; import 'support/step_definitions.dart'; void main() async { await MorphemeCucumber( config: CucumberConfig(), hook: CucumberHook(), reporter: [JsonReporter(), StdoutReporter()], stepDefinitions: stepDefinitions, ).execute(); }  "},{"title":"Config​","type":1,"pageTitle":"Morpheme Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber#config","content":"You can create Config or make it default null: integration_test/support/cucumber_config.dart import 'package:core/core.dart'; import 'package:morpheme_cucumber/morpheme_cucumber.dart'; class CucumberConfig extends Config { @override bool get nativeAutomation =&gt; false; @override NativeAutomatorConfig get nativeAutomatorConfig =&gt; const NativeAutomatorConfig( androidAppName: Environment.appName, iosAppName: Environment.appName, packageName: Environment.androidApplicationId, bundleId: Environment.iosApplicationId, ); @override PatrolTesterConfig get patrolTesterConfig =&gt; const PatrolTesterConfig( visibleTimeout: Duration(minutes: 1), ); @override bool get skipScenario =&gt; false; @override Duration get timeout =&gt; const Duration(minutes: 5); }  "},{"title":"Hook​","type":1,"pageTitle":"Morpheme Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber#hook","content":"Now you can add your Hook for cucumber: integration_test/support/cucumber_hook.dart import 'package:core/core.dart'; import 'package:morpheme_cucumber/morpheme_cucumber.dart'; import 'package:morpheme_flutter_starter_kit/main.dart' as app; class CucumberHook extends Hook { @override Future&lt;void&gt; onBeforeExecute() async { await app.init(); } @override Future&lt;void&gt; onAfterExecute() async {} @override Future&lt;void&gt; onBeforeFeature(PatrolTester $) async {} @override Future&lt;void&gt; onAfterFeature(PatrolTester $) async { await FlutterSecureStorageHelper.logout(); } @override Future&lt;void&gt; onBeforeScenario(PatrolTester $) async { await $.pumpWidget(const app.MyApp()); } @override Future&lt;void&gt; onAfterScenario(PatrolTester $) async { locator&lt;GoRouter&gt;().go('/'); } @override Future&lt;void&gt; onBeforeStep(PatrolTester $) async {} @override Future&lt;void&gt; onAfterStep(PatrolTester $) async {} }  "},{"title":"Step Definitions​","type":1,"pageTitle":"Morpheme Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber#step-definitions","content":"and the requirement morpheme_cucumber its step_definitions.dart: integration_test/support/step_definitions.dart import 'package:flutter/material.dart'; import 'package:morpheme_cucumber/morpheme_cucumber.dart'; Map&lt;RegExp, Function&gt; stepDefinitions = { // Action RegExp(r'I wait for &quot;([^&quot;]*)&quot; key to visible'): (PatrolTester $, String key) async { await $(Key(key)).waitUntilVisible(); }, RegExp(r'I clear textfield in &quot;([^&quot;]*)&quot; key'): (PatrolTester $, String key) async { await $(Key(key)).enterText(''); }, RegExp(r'I enter &quot;([^&quot;]*)&quot; into &quot;([^&quot;]*)&quot; key'): (PatrolTester $, String value, String key) async { await $(Key(key)).enterText(value); }, RegExp(r'I scroll in &quot;([^&quot;]*)&quot; key until visible &quot;([^&quot;]*)&quot; key'): (PatrolTester $, String scrollKey, String visibleKey) async { await $(Key(visibleKey)) .scrollTo(scrollable: $(Key(scrollKey)).$(Scrollable)); }, RegExp(r'I tap &quot;([^&quot;]*)&quot; key'): (PatrolTester $, String key) async { await $(Key(key)).tap(); }, RegExp(r'I longtap &quot;([^&quot;]*)&quot; key'): (PatrolTester $, String key) async { await $.tester.longPress($(key)); }, };  you can add your custom another step definitions with RegExp String &quot;([^&quot;]*)&quot;num &quot;(\\d+)&quot;Select &quot;(JSON|YAML|XML|HTML)&quot; or other reg exp just on grouping (). "},{"title":"Add Assets in pubspec.yaml​","type":1,"pageTitle":"Morpheme Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber#add-assets-in-pubspecyaml","content":"Create directory in integration_test/ndjson/Then add as assets in pubspec.yaml pubspec.yaml ... flutter: uses-material-design: true assets: - integration_test/ndjson/  "},{"title":"Reporters​","type":1,"pageTitle":"Morpheme Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber#reporters","content":"Reporters are classes that are able to report on the status of the test run. This could be a simple as merely logging scenario result to the console. There are a number of built-in reporter: StdoutReporter : Logs all messages from the test run to the standard output (console).JsonReporter : creates a JSON file with the results of the test run which can then be used by 'https://www.npmjs.com/package/cucumber-html-reporter.' to create a HTML report. You can pass in the file path of the json file to be created "},{"title":"Features​","type":1,"pageTitle":"Morpheme Cucumber","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber#features","content":"write your feature in integration_test/features/login.feature: integration_test/features/login.feature Feature: Login Scenario: Login with username and pin then failed When I enter &quot;example@morpheme.id&quot; into &quot;inputEmail&quot; key When I scroll in &quot;scrollLogin&quot; key until visible &quot;inputPin&quot; key When I enter &quot;123455&quot; into &quot;inputPin&quot; key When I scroll in &quot;scrollLogin&quot; key until visible &quot;btnLogin&quot; key When I tap &quot;btnLogin&quot; key Scenario: Login with username and pin then success When I enter &quot;example@morpheme.id&quot; into &quot;inputEmail&quot; key When I scroll in &quot;scrollLogin&quot; key until visible &quot;inputPin&quot; key When I enter &quot;123456&quot; into &quot;inputPin&quot; key When I scroll in &quot;scrollLogin&quot; key until visible &quot;btnLogin&quot; key When I tap &quot;btnLogin&quot; key  "},{"title":"Deployment","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/deployment","content":"","keywords":""},{"title":"Android​","type":1,"pageTitle":"Deployment","url":"/morpheme-flutter-documentation/docs/starter_kit/deployment#android","content":"For android you can build 2 way: Build APK you can read more to build apk in MorphemeCLI Build APKBuild AAB you can read more to build aab in MorphemeCLI Build AAB "},{"title":"iOS​","type":1,"pageTitle":"Deployment","url":"/morpheme-flutter-documentation/docs/starter_kit/deployment#ios","content":"For iOS you can build 2 way: Build archive you can read more to build archive in MorphemeCLI Build ArchiveBuild IPA you can read more to build ipa in MorphemeCLI Prebuild ios and after prebuild then MorphemeCLI Build IPA "},{"title":"Authorization","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/authorization","content":"Authorization Authorization used morpheme_http and setup in core/lib/src/locator.dart core/lib/src/locator.dart void setupLocatorFeatureCore() { ... locator.registerLazySingleton( () =&gt; MorphemeHttp( timeout: 30000, showLog: false, morphemeInspector: kIsWeb ? null : locator(), authTokenOption: AuthTokenOption( // add authTokenOption to set automatically authorization when call api typeHeader: 'Authorization', prefixHeader: 'Bearer', getToken: () =&gt; FlutterSecureStorageHelper.getToken(), authCondition: (request, response) =&gt; request.url == MorphemeEndpoints.login, onAuthTokenResponse: (response) async { final map = jsonDecode(response.body); await FlutterSecureStorageHelper.saveToken(map['token']); await FlutterSecureStorageHelper.saveRefreshToken( map['refresh_token'], ); }, clearCondition: (request, response) =&gt; request.url == MorphemeEndpoints.logout, onClearToken: () =&gt; FlutterSecureStorageHelper.removeToken(), excludeEndpointUsageToken: [ MorphemeEndpoints.login, MorphemeEndpoints.register, ], ), ), ); } ","keywords":""},{"title":"Morpheme HTTP","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http","content":"","keywords":""},{"title":"Auth Token​","type":1,"pageTitle":"Morpheme HTTP","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http#auth-token","content":"To set the token, it is done after authorization and getting the token. the token is stored to local and setup on MorphemeHttp. MorphemeHttp( ... authTokenOption:AuthTokenOption( typeHeader: 'Authorization', prefixHeader: 'Bearer', getToken: () =&gt; locator&lt;FlutterSecureStorage&gt;().read(key: 'token'), authCondition: (request, response) =&gt; request.url == MorphemeEndpoints.login, onAuthTokenResponse: (response) async { final map = jsonDecode(response.body); await locator&lt;FlutterSecureStorage&gt;().write( key: 'token', value: map['token'], ); await locator&lt;FlutterSecureStorage&gt;().write( key: 'refresh_token', value: map['refresh_token'], ); }, clearCondition: (request, response) =&gt; request.url == MorphemeEndpoints.logout, onClearToken: () =&gt; locator&lt;FlutterSecureStorage&gt;().delete(key: 'token'), excludeEndpointUsageToken: [ MorphemeEndpoints.login, MorphemeEndpoints.register, ], ), ... );  After we set the token, every API call will add an Authorization header with a default value of Bearer $token. "},{"title":"Refresh Token​","type":1,"pageTitle":"Morpheme HTTP","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http#refresh-token","content":"To set the token, it is done after authorization and getting the token. the token is stored to local and setup on MorphemeHttp. MorphemeHttp( ... refreshTokenOption: RefreshTokenOption( method: RefreshTokenMethod.post, url: MorphemeEndpoints.refreshToken, condition: (request, response) =&gt; request.url != MorphemeEndpoints.login &amp;&amp; response.statusCode == 401, getBody: () async { final refreshToken = await locator&lt;FlutterSecureStorage&gt;().read(key: 'refresh_token'); return { 'refresh_token': refreshToken ?? '', }; }, onResponse: (response) async { // handle response refresh token final map = jsonDecode(response.body); locator&lt;FlutterSecureStorage&gt;().write( key: 'token', value: map['token'], ); }, ), ... );  "},{"title":"Get​","type":1,"pageTitle":"Morpheme HTTP","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http#get","content":"final MorphemeHttp http = locator(); final response = await http.get(Uri.parse('https://api.morpheme.id'), body: body.toMap());  "},{"title":"Post​","type":1,"pageTitle":"Morpheme HTTP","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http#post","content":"final MorphemeHttp http = locator(); final response = await http.post(Uri.parse('https://api.morpheme.id'), body: body.toMap());  "},{"title":"Put​","type":1,"pageTitle":"Morpheme HTTP","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http#put","content":"final MorphemeHttp http = locator(); final response = await http.put(Uri.parse('https://api.morpheme.id'), body: body.toMap());  "},{"title":"Patch​","type":1,"pageTitle":"Morpheme HTTP","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http#patch","content":"final MorphemeHttp http = locator(); final response = await http.patch(Uri.parse('https://api.morpheme.id'), body: body.toMap());  "},{"title":"Delete​","type":1,"pageTitle":"Morpheme HTTP","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http#delete","content":"final MorphemeHttp http = locator(); final response = await http.delete(Uri.parse('https://api.morpheme.id'), body: body.toMap());  "},{"title":"Post Multipart​","type":1,"pageTitle":"Morpheme HTTP","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http#post-multipart","content":"final MorphemeHttp http = locator(); final File file = getImage(); final response = await http.postMultipart(Uri.parse('https://api.morpheme.id'), files: {'image': file}, body: body.toMap());  "},{"title":"Firebase","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/firebase","content":"","keywords":""},{"title":"Setup​","type":1,"pageTitle":"Firebase","url":"/morpheme-flutter-documentation/docs/starter_kit/firebase#setup","content":"In firebase have flavor and each flavor can be different project setup. morpheme.yaml ... firebase: dev: #flavor project_id: &quot;morpheme-dev&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; platform: &quot;android,ios,web&quot; #optional android_package_name: &quot;design.morpheme.dev&quot; #optional by default use from flavor[ANDROID_APPLICATION_ID] ios_bundle_id: &quot;design.morpheme.dev&quot; #optional by default use from flavor[IOS_APPLICATION_ID] web_app_id: &quot;YOUR WEB APP ID&quot; #optional stag: project_id: &quot;morpheme-stag&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; prod: project_id: &quot;morpheme&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; platform: &quot;android,ios&quot; ...  for token you need to get from firebase_cli you need install that and run firebase login:ci to get token. "},{"title":"Command​","type":1,"pageTitle":"Firebase","url":"/morpheme-flutter-documentation/docs/starter_kit/firebase#command","content":"morpheme firebase -f [flavor]  caution Ensure you already to install flutterfire or you can check with moprpheme doctor to see requirement you dont already installed. you can install flutterfire with dart pub global activate flutterfire. "},{"title":"Dependency Manager","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/dependency_manager","content":"Dependency Manager Centeralize all depedency in one module make more readable and easy maintenance to depedencies we used, module dependency_manager you can find in core/packages/depedency_manager and core/packages/morpheme_library for morpheme depedency. Dependency Manager just define depedency in pubspec.yaml and export it. core/packages/depedency_manager/pubspec.yaml name: dependency_manager description: All dependency package of project here. version: 0.0.1 publish_to: &quot;none&quot; environment: sdk: &quot;&gt;=3.0.0 &lt;4.0.0&quot; flutter: &quot;&gt;=3.10.0&quot; dependencies: flutter: sdk: flutter # Google Font google_fonts: ^6.1.0 # Navigation go_router: ^13.2.0 # Service Locator get_it: ^7.6.7 # Storage flutter_secure_storage: ^9.0.0 # Component skeletonizer: ^1.0.1 # Utils equatable: ^2.0.5 collection: ^1.18.0 # Firebase # firebase_core: ^2.25.4 # firebase_analytics: ^10.8.5 # firebase_crashlytics: ^3.4.14 # firebase_remote_config: ^4.3.13 # Test mocktail: ^1.0.3 bloc_test: ^9.1.6 dev_dependencies: flutter_test: sdk: flutter flutter_lints: ^3.0.1 flutter: uses-material-design: true and export all you need core/packages/dependency_manager/lib/dependency_manager.dart library dependency_manager; export 'package:collection/collection.dart'; export 'package:equatable/equatable.dart'; // export 'package:firebase_analytics/firebase_analytics.dart'; // export 'package:firebase_core/firebase_core.dart'; // export 'package:firebase_crashlytics/firebase_crashlytics.dart'; // export 'package:firebase_remote_config/firebase_remote_config.dart'; export 'package:flutter_secure_storage/flutter_secure_storage.dart'; export 'package:get_it/get_it.dart'; export 'package:go_router/go_router.dart'; export 'package:google_fonts/google_fonts.dart'; export 'package:skeletonizer/skeletonizer.dart'; ","keywords":""},{"title":"Internationalization","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/internationalization","content":"","keywords":""},{"title":"Single .arb​","type":1,"pageTitle":"Internationalization","url":"/morpheme-flutter-documentation/docs/starter_kit/internationalization#single-arb","content":"We can create multilingual systems with single .arb  "},{"title":"Spesific .arb​","type":1,"pageTitle":"Internationalization","url":"/morpheme-flutter-documentation/docs/starter_kit/internationalization#spesific-arb","content":"We can create multilingual systems with specific .arb based on our features for easy maintenance with this structure:  caution We are unable to combine single and specific.arb ! "},{"title":"Generate The Languages​","type":1,"pageTitle":"Internationalization","url":"/morpheme-flutter-documentation/docs/starter_kit/internationalization#generate-the-languages","content":"This command is used to generate the l10n file at the path assets/assets/l1on/ so that we can use it in the project. morpheme l10n  tip Use this command when there is a change in the l10n file.Especially for vscode users, to make it easier to process l10n files, we can use the extension i10n arb editor, don't forget to save and use the command above after making changes. (This tips only works for non spesific .arb or single .arb file) "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/introduction","content":"","keywords":""},{"title":"What is Morpheme Flutter Starter Kit?​","type":1,"pageTitle":"Introduction","url":"/morpheme-flutter-documentation/docs/starter_kit/introduction#what-is-morpheme-flutter-starter-kit","content":"Morpheme Flutter Starter Kit is base starter template powered with Morpheme CLI that used in Morpheme. It's built on top of Flutter 3.16 or later with Modular Architecture. "},{"title":"Goals​","type":1,"pageTitle":"Introduction","url":"/morpheme-flutter-documentation/docs/starter_kit/introduction#goals","content":"The main purpose of making a starter kit is to prepare project templates that are ready to use without rebuilding from scratch. Also, the starter kit must be: Easy to get startedHighly customizableSpeed up the development processArchitectural standardizationEasy to maintainIncluded with ready-to-use UI ComponentWell documented "},{"title":"Technologies​","type":1,"pageTitle":"Introduction","url":"/morpheme-flutter-documentation/docs/starter_kit/introduction#technologies","content":"The core of this starter is must run with Morpheme CLI "},{"title":"Morpheme CLI​","type":1,"pageTitle":"Introduction","url":"/morpheme-flutter-documentation/docs/starter_kit/introduction#morpheme-cli","content":"One of the mandatory requirements to be installed on your machine is to run a Flutter project using a starter kit plus there are powerful features that can help speed up the development process with the help of generating code from the Morpheme CLI. Learn more about Morpheme CLI here "},{"title":"Morpheme Library​","type":1,"pageTitle":"Introduction","url":"/morpheme-flutter-documentation/docs/starter_kit/introduction#morpheme-library","content":"Morpheme Base​ MorphemeBase is base for UI project include state management with cubit &amp; hydrated. Learn more about Morpheme Base here Morpheme HTTP​ Future-based library for making HTTP requests modified from http package. Learn more about Morpheme HTTP here Morpheme Inspector​ A simple in-app for MorphemeHttp inspector. Intercepts and persists all HTTP requests and responses inside your application, and provides a UI for inspecting their content.. Learn more about Morpheme Inspector here Morpheme Extension​ Superpowers for Dart. Collection of useful static extension methods. Learn more about Morpheme Extension here "},{"title":"Other Dependencies​","type":1,"pageTitle":"Introduction","url":"/morpheme-flutter-documentation/docs/starter_kit/introduction#other-dependencies","content":"Here are list of dependencies that also used on this project. Google FontsFlutter BlocGo RouterGet ItFlutter Secure StorageEquatableCollectionMocktailBloc Test "},{"title":"Json2Dart","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/json2dart","content":"Json2Dart This command is used to generate the API based on the configuration json file in the json2dart/json2dart.yaml file morpheme json2dart info The generated API will be available according to the features and pages that we configure. json2dart.yaml Configuration To add API we have to add this following line: json2dart/json2dart.yaml feature_name: page_name: api_name: base_url: base_url path: endpoint_name method: your_api_method body: url_file_body_json response: url_file_response_json header: url_file_hearder_json // optional cache_stategy: cache_stategy // optional Cache Strategy : Inside json2dart.yaml there are cache_strategy allow additions: async_or_cache, cache_or_async, just_async, just_cache. by default set to just_async. async_or_cache : strategy to fetch the api first and cache the response. if fetch fails it will return data from cache.cache_or_async : strategy if there is data in the cache and it is not expired then it will return data from the cache first. otherwise it will fetch api and responsen will be cached.just_async : a strategy that only fetches the api to get the data.just_cache : a strategy that only gets data from cache. Simple Implementation cache_strategy: async_or_cache Detail Implementation cache_strategy: strategy: async_or_cache ttl: 60 #in Minutes keep_expired_cache: true Extra notes: We can add more than one api on a page. Allowed methods: get, post, put, patch, delete &amp; multipart. Options : (We need to add this manually) json2dart/json2dart.yaml ... json2dart: body_format_date_time: yyyy-MM-dd // default is .toIso8601String() response_format_date_time: yyyy-MM-dd HH:mm // default is .toIso8601String() api: true // default is true endpoint: true // default is true unit-test: false // default is false replace: false // default is false ... For example, we will add the delete user API to page users in the master feature using json2dart, here are the steps: Add json files for &quot;response&quot; and &quot;body&quot; API, response json files in json2dart/json/response/, for body json files json2dart/json/body/ json2dart/json/body/delete_user_body.json { &quot;id_user&quot;:&quot;id_user&quot; } json2dart/json/response/delete_user_response.json {} Add the delete_user API configuration to the json2dart/json2dart.yaml file json2dart/json2dart.yaml json2dart: body_format_date_time: yyyy-MM-dd response_format_date_time: yyyy-MM-dd HH:mm api: true endpoint: true unit-test: false replace: false environment_url: - &amp;base_url BASE_URL remote: .login: &amp;login base_url: *base_url path: /login method: post # header: json2dart/json/header/login_header.json body: json2dart/json/body/login_body.json response: json2dart/json/response/login_response.json cache_strategy: async_or_cache .register: &amp;register base_url: *base_url path: /register method: post # header: json2dart/json/header/register_header.json body: json2dart/json/body/register_body.json response: json2dart/json/response/register_response.json cache_strategy: strategy: cache_or_async ttl: 60 .forgot_password: &amp;forgot_password base_url: *base_url path: /forgot_password method: get # header: json2dart/json/header/forgot_password_header.json body: json2dart/json/body/forgot_password_body.json response: json2dart/json/response/forgot_password_response.json cache_strategy: strategy: just_cache ttl: 120 keep_expired_cache: true # Add delete user delete_user: # api-name base_url: *base_url path: /delete_user method: delete body: json2dart/json/body/delete_user_body.json response: json2dart/json/response/delete_user_response.json cache_strategy: just_async auth: login: login: *login register: register: *register forgot_password: forgot_password: *forgot_password # Add delete user master: users: delete_user: *delete_user Generate API with this command morpheme json2dart The delete user API is automatically added to page users in the feature master, after that we need to add the BLoC to our Cubit.","keywords":""},{"title":"Middleware","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/middleware","content":"Middleware Middleware used morpheme_http and setup in core/lib/src/locator.dart core/lib/src/locator.dart void setupLocatorFeatureCore() { ... locator.registerLazySingleton( () =&gt; MorphemeHttp( timeout: 30000, showLog: false, morphemeInspector: kIsWeb ? null : locator(), middlewareResponseOption: MiddlewareResponseOption( condition: (request, response) { return response.statusCode == 401; }, onResponse: (response) async { locator&lt;GoRouter&gt;().go(PathRoutes.login); }, ), ), ); } ","keywords":""},{"title":"Morpheme Extension","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension","content":"","keywords":""},{"title":"Scope Functions​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#scope-functions","content":""},{"title":".run​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#run","content":"Calls the specified function [block] with [it] value as its receiver and returns its result. String? getValue() =&gt; '1'; final value = getValue(); value?.run((it) =&gt; doSomething(it));  "},{"title":".let​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#let","content":"Calls the specified function [block] with [it] value as its argument and returns its result. String? getValue() =&gt; '1'; final value = getValue(); final let = value?.let((it) =&gt; int.parse(it)); // 1 (int)  "},{"title":".also​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#also","content":"Calls the specified function [block] with [it] value as its argument and returns block value. String? getValue() =&gt; '1'; final value = getValue(); int itValue = 0; final also = value?.also((it) { itValue = int.parse(it); }); print(also); // 1 (String) print(itValue); // 1 (int)  "},{"title":".takeIf​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#takeif","content":"Returns [T] value if it satisfies the given [predicate] or null, if it doesn't. final a = 10.takeIf((it) =&gt; it % 2 == 0); // 10 final b = 9.takeIf((it) =&gt; it % 2 == 0); // null  "},{"title":".takeUnless​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#takeunless","content":"Returns [T] value if it does not satisfy the given [predicate] or null, if it does. final value = 10.takeUnless((it) =&gt; it % 2 == 0); // null final value = 9.takeUnless((it) =&gt; it % 2 == 0); // 9  "},{"title":"int​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#int","content":""},{"title":".plus​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#plus","content":"Return int this plus with [value]. final a = 1.plus(1); // 2 final b = 200.plus(50); // 250  "},{"title":".minus​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#minus","content":"Return int this minus with [value]. final a = 1.minus(1); // 0 final b = 200.minus(50); // 150  "},{"title":".ordinal​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#ordinal","content":"Returns an ordinal number of String type for any integer final a = 1.ordinal(); // 1st final b = 108.ordinal(); // 108th  "},{"title":"double​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#double","content":""},{"title":".plus​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#plus-1","content":"Return double this plus with [value]. final a = 1.0.plus(1.5); // 2.5 final b = 200.5.plus(50.5); // 251.0  "},{"title":".minus​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#minus-1","content":"Return double this minus with [value]. final a = 1.5.minus(1.0); // 0.5 final b = 200.5.minus(50.5); // 150  "},{"title":"String​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#string","content":""},{"title":".isEmail​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#isemail","content":"Return boolean checks whether the String is a valid email. final isEmail = 'example@gmail.com'.isEmail; // true final isNotEmail = 'example@'.isEmail; // false  "},{"title":".capitalize​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#capitalize","content":"Returns a copy of the string having its first letter uppercased, or the original string, if it's empty or already starts with an upper case letter. final word = 'abcd'.capitalize(); // Abcd final anotherWord = 'Abcd'.capitalize(); // Abcd  "},{"title":".decapitalize​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#decapitalize","content":"Returns a copy of the string having its first letter lowercased, or the original string, if it's empty or already starts with a lower case letter. final word = 'abcd'.decapitalize(); // abcd final anotherWord = 'Abcd'.decapitalize(); // abcd  "},{"title":".isBlank​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#isblank","content":"Returns true if this string is empty or consists solely of whitespace characters. final notBlank = ' .'.isBlank; // false final blank = ' '.isBlank; // true  "},{"title":".isDouble​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#isdouble","content":"Returns true if the string can be parsed as a double. final a = ''.isDouble; // false final b = 'a'.isDouble; // false final c = '1'.isDouble; // true final d = '1.0'.isDouble; // true final e = '123456789.987654321'.isDouble; // true final f = '1,000'.isDouble; // false  "},{"title":".isInt​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#isint","content":"Returns true if the string can be parsed as an integer. final a = ''.isInt; // false final b = 'a'.isInt; // false final c = '1'.isInt; // true final d = '1.0'.isInt; // false final e = '1,000'.isInt; // false  "},{"title":".isLowerCase​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#islowercase","content":"Returns true if the entire string is lower case. final a = 'abc'.isLowerCase; // true final b = 'abC'.isLowerCase; // false final c = ' '.isLowerCase; // true final d = ''.isLowerCase; // false  "},{"title":".isNotBlank​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#isnotblank","content":"Returns true if this string is not empty and contains characters except whitespace characters. final blank = ' '.isNotBlank; // false final notBlank = ' .'.isNotBlank; // true  "},{"title":".isNullOrEmpty​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#isnullorempty","content":"Returns true if the String is either null or empty. final isNull = null.isNullOrEmpty; // true final isEmpty = ''.isNullOrEmpty; // true final isBlank = ' '.isNullOrEmpty; // false final isLineBreak = '\\n'.isNullOrEmpty; // false  "},{"title":".isNotNullOrEmpty​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#isnotnullorempty","content":"Returns true if the String is neither null nor empty. final isNull = null.isNullOrEmpty; // true final isEmpty = ''.isNullOrEmpty; // true final isBlank = ' '.isNullOrEmpty; // false final isLineBreak = '\\n'.isNullOrEmpty; // false  "},{"title":".isNullOrBlank​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#isnullorblank","content":"Returns true if the String is either null or blank. final isNull = null.isNullOrBlank; // true final isEmpty = ''.isNullOrBlank; // true final isBlank = ' '.isNullOrBlank; // true final isLineBreak = '\\n'.isNullOrBlank; // true final isFoo = ' foo '.isNullOrBlank; // false  "},{"title":".isNotNullOrBlank​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#isnotnullorblank","content":"Returns true if the String is neither null nor blank. final isNull = null.isNullOrBlank; // true final isEmpty = ''.isNullOrBlank; // true final isBlank = ' '.isNullOrBlank; // true final isLineBreak = '\\n'.isNullOrBlank; // true final isFoo = ' foo '.isNullOrBlank; // true  "},{"title":".isUpperCase​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#isuppercase","content":"Returns true if the entire string is upper case. final a = 'ABC'.isUpperCase; // true final b = 'ABc'.isUpperCase; // false final c = ' '.isUpperCase; // true final d = ''.isUpperCase; // false  "},{"title":".urlEncode​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#urlencode","content":"Translates a string into application/x-www-form-urlencoded format using a specific encoding scheme. const originalUrl = 'Hello Ladies + Gentlemen, a signed OAuth request!'; final encodedUrl = originalUrl.urlEncode; // 'Hello%20Ladies%20+%20Gentlemen,%20a%20signed%20OAuth%20request!'  "},{"title":".urlDecode​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#urldecode","content":"Decodes an application/x-www-form-urlencoded string using a specific encoding scheme. const encodedUrl = 'Hello%20Ladies%20+%20Gentlemen,%20a%20signed%20OAuth%20request!'; final decodedUrl = encodingUrl.urlDecode; // 'Hello Ladies + Gentlemen, a signed OAuth request!'  "},{"title":".slice()​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#slice","content":"Returns a new substring containing all characters including indices [start] and [end]. If [end] is omitted, it is being set to lastIndex. final sliceOne = 'awesomeString'.slice(0,6)); // awesome final sliceTwo = 'awesomeString'.slice(7)); // String  "},{"title":".toDoubleOrNull()​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#todoubleornull","content":"Parses the string as a double and returns the result or null if the String is not a valid representation of a number. final numOne = '1'.toDoubleOrNull(); // 1.0 final numTwo = '1.2'.toDoubleOrNull(); // 1.2 final blank = ''.toDoubleOrNull(); // null  "},{"title":".toInt()​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#toint","content":"Parses the string as an integer and returns the result. The radix (base) thereby defaults to 10. Throws a FormatException if parsing fails. final a = '1'.toInt(); // 1 final b = '100'.toInt(radix: 2); // 4 final c = '100'.toInt(radix: 16); // 256 final d = '1.0'.toInt(); // throws FormatException  "},{"title":".toIntOrNull()​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#tointornull","content":"Parses the string as an integer or returns null if it is not a number. final number = '12345'.toIntOrNull(); // 12345 final notANumber = '123-45'.toIntOrNull(); // null  "},{"title":".toUtf8()​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#toutf8","content":"Converts String to UTF-8 encoding. final emptyString = ''.toUtf8(); // [] final hi = 'hi'.toUtf8(); // [104, 105] final emoji = '😄'.toUtf8(); // [240, 159, 152, 132]  "},{"title":".toUtf16()​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#toutf16","content":"Converts String to UTF-16 encoding. final emptyString = ''.toUtf16(); // [] final hi = 'hi'.toUtf16(); // [104, 105] final emoji = '😄'.toUtf16(); // [55357, 56836]  "},{"title":".orEmpty()​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#orempty","content":"Returns the string if it is not null, or the empty string otherwise. String? nullableStr; final str = nullableStr.orEmpty(); // ''  "},{"title":".matches()​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#matches","content":"Returns true if this char sequence matches the given regular expression. print('as'.matches(RegExp('^.s\\$'))) // true print('mst'.matches(RegExp('^.s\\$'))) // false  "},{"title":"Iterable Num​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#iterable-num","content":""},{"title":".sum​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#sum","content":"Return int this plus with [value]. final a = [50, 10, 40].sum(); // 100  "},{"title":".average​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#average","content":"Return int this plus with [value]. final a = [50, 10].average(); // 30.0  "},{"title":".median​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#median","content":"Return int this plus with [value]. final a = [1, 2, 3, 4, 5].median(); // 3 final b = [5, 4, 3, 2, 1].median(); // 3  "},{"title":"Time utils​","type":1,"pageTitle":"Morpheme Extension","url":"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension#time-utils","content":"Morpheme extension exports @jogboms great ⏰ time.dart package so you can do the following: int secondsInADay = 1.days.inSeconds; Duration totalTime = [12.5.seconds, 101.milliseconds, 2.5.minutes].sum(); DateTime oneWeekLater = DateTime.now() + 1.week;  Check out ⏰ time.dart for more information and examples. "},{"title":"Service Locator","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/service_locator","content":"Service Locator Service locator using get_it, but you don't worry about this cause if you use Morpheme Starter Kit and Morpheme CLI all locator was handle by generated. All locator you can find in: core/lib/src/locator.dart in every features you can find (e.g auth features/auth/lib/locator.dart) lib/locator.dart all features and core locator setup in this file void setupLocator() { locator.registerLazySingleton(() =&gt; Routes.router); setupLocatorFeatureCore(); setupLocatorFeatureAuth(); setupLocatorFeatureOnboarding(); setupLocatorFeatureHome(); setupLocatorFeatureNews(); setupLocatorFeatureProfile(); setupLocatorFeatureSelling(); } Call setupLocator() in main void main() async { // usePathUrlStrategy(); runZonedGuarded&lt;Future&lt;void&gt;&gt;(() async { WidgetsFlutterBinding.ensureInitialized(); setupLocator(); runApp(const MyApp()); }, (error, stack) { log(error.toString(), error: error, stackTrace: stack); // FirebaseCrashlytics.instance.recordError(error, stack, fatal: true); }); } ","keywords":""},{"title":"Page","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/page","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Page","url":"/morpheme-flutter-documentation/docs/starter_kit/page#example","content":"Here's an example of how you can use the morpheme page command to create a new page in the users feature module, with the feature name set to master: morpheme page users -f master  As you can see, the command has generated the following files and folders in the users feature module: lib/users/presentation/cubit/users_cubit.dart: The Cubit file for the new page.lib/users/presentation/pages/users_page.dart: The UI page file for the new page.lib/users/presentation/widgets/.gitkeep: An empty file to preserve the widgets folder.lib/users/locator.dart: The locator file for the users feature module.lib/locator.dart: The main locator file for the entire project. With these files and folders generated, you can now start adding your own code to create the new page in the users feature module.  caution Page will not be generated if: The feature that we enter does not existThe page name we entered already exists "},{"title":"Refresh Token","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/refresh_token","content":"Refresh Token Refresh token used morpheme_http and setup in core/lib/src/locator.dart core/lib/src/locator.dart void setupLocatorFeatureCore() { ... locator.registerLazySingleton( () =&gt; MorphemeHttp( timeout: 30000, showLog: false, morphemeInspector: kIsWeb ? null : locator(), refreshTokenOption: RefreshTokenOption( method: RefreshTokenMethod.post, url: MorphemeEndpoints.refreshToken, condition: (request, response) =&gt; request.url != MorphemeEndpoints.login &amp;&amp; response.statusCode == 401, getBody: () async { final refreshToken = await FlutterSecureStorageHelper.getRefreshToken(); return { 'refresh_token': refreshToken ?? '', }; }, onResponse: (response) async { final map = jsonDecode(response.body); await FlutterSecureStorageHelper.saveRefreshToken(map['token']); }, ), ), ); } ","keywords":""},{"title":"State Management (MorphemeCubit & BLoC)","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/state_management","content":"State Management (MorphemeCubit &amp; BLoC) State Management you can read more in MorphemeBase","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/started","content":"","keywords":""},{"title":"Requirement​","type":1,"pageTitle":"Getting Started","url":"/morpheme-flutter-documentation/docs/starter_kit/started#requirement","content":"Dart SDK 3.2 - latestFlutter: 3.16.0 - latest note Dart SDK Installation Dart SDKFlutter SDK Installation Flutter SDK "},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/morpheme-flutter-documentation/docs/starter_kit/started#installation","content":"Install Morpheme CLI Create new project with run command: morpheme create my-app To see all available options and flags, run morpheme create --help or check in here. Run your emulator or connect your device Now you can run apps in VS Code with press F5 or you can run via terminal with command: morpheme run To see all available options and flags, run morpheme run --help or check in here. info If you want install manually you need to follow this step: Clone source this from repository Morpheme Flutter Starter Kit # via SSH git clone git@github.com:morphemedesign/morpheme-flutter.git # via HTTPS git clone https://github.com/morphemedesign/morpheme-flutter.git Remove the .git folder and initialize the new one. cd my-app rm -rf .git git init git commit -am &quot;initial commit&quot; Init configuration morpheme init morpheme config Install the dependencies morpheme get Run your emulator or connect your device Now you can run apps in VS Code with press F5 or you can run via terminal with command: morpheme run To see all available options and flags, run morpheme run --help or check in here. "},{"title":"Feature","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/feature","content":"","keywords":""},{"title":"Generate Feature​","type":1,"pageTitle":"Feature","url":"/morpheme-flutter-documentation/docs/starter_kit/feature#generate-feature","content":"To generate features you can follow these steps: morpheme feature [feature_name]  for the example we will generate a new feature named master morpheme feature master  The feature master folder will be created automatically, we can check in features/master/  caution The feature will not be generated if the feature name we enter already exists. Learn more about morpheme feature here "},{"title":"What is Generated​","type":1,"pageTitle":"Feature","url":"/morpheme-flutter-documentation/docs/starter_kit/feature#what-is-generated","content":"Feature Master Folder Structure ┌── ... ├── features # Modules feature directory │ ├── ... │ ├── master # Master's modules │ │ ├── lib │ │ │ ├── locator.dart # Service locator master (auto generated, not allow to editable) │ │ ├── test │ │ │ ├── .gitkeep # Keep this directory in repository │ │ ├── .gitignore │ │ ├── .metadata │ │ ├── analysis_options.yaml │ │ ├── CHANGELOG.md │ │ ├── LICENSE │ │ ├── pubspec.yaml │ │ ├── README.md └── ... Auto add dependency in main pubspec.yaml pubspec.yaml name: morpheme_flutter_starter_kit description: A new Flutter project. publish_to: &quot;none&quot; version: 2.5.0+1 environment: sdk: &quot;&gt;=2.17.0 &lt;3.0.0&quot; dependencies: flutter: sdk: flutter core: path: ./core splash: path: ./features/splash onboarding: path: ./features/onboarding auth: path: ./features/auth home: path: ./features/home news: path: ./features/news profile: path: ./features/profile selling: path: ./features/selling master: # Added this generate path: ./features/master # Added this generate dev_dependencies: integration_test: sdk: flutter flutter_test: sdk: flutter flutter_lints: ^2.0.1 morpheme_cucumber: ^1.2.1 flutter: uses-material-design: true assets: - integration_test/ndjson/ Auto add setupLocatorFeature in lib/locator.dart // // Generated file. Edit just you manually add or delete a feature. // import 'package:auth/locator.dart'; import 'package:core/core.dart'; import 'package:home/locator.dart'; import 'package:master/locator.dart'; import 'package:news/locator.dart'; import 'package:onboarding/locator.dart'; import 'package:profile/locator.dart'; import 'package:selling/locator.dart'; import 'routes/routes.dart'; void setupLocator() { locator.registerLazySingleton(() =&gt; Routes.router); setupLocatorFeatureCore(); setupLocatorFeatureAuth(); setupLocatorFeatureOnboarding(); setupLocatorFeatureHome(); setupLocatorFeatureNews(); setupLocatorFeatureProfile(); setupLocatorFeatureSelling(); setupLocatorFeatureMaster(); // Added this generate }  "},{"title":"Routes","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/routes","content":"","keywords":""},{"title":"Setup​","type":1,"pageTitle":"Routes","url":"/morpheme-flutter-documentation/docs/starter_kit/routes#setup","content":"Routes in Morpheme you can find it in two files lib/routes/routes.dart Structure in this file Routes abstract class Routes { static GoRouter router = GoRouter( navigatorKey: rootNavigatorKey, debugLogDiagnostics: kDebugMode, initialLocation: joinRoutes([MorphemeRoutes.splash]), routes: [ GoRoute( path: joinRoutes([MorphemeRoutes.splash]), builder: (context, state) =&gt; const SplashPage(), ), GoRoute( path: joinRoutes([MorphemeRoutes.onboarding]), builder: (context, state) =&gt; const OnboardingPage(), ), GoRoute( path: joinRoutes([MorphemeRoutes.login]), builder: (context, state) =&gt; const LoginPage(), routes: [ GoRoute( path: MorphemeRoutes.register, builder: (context, state) =&gt; const RegisterPage(), ), GoRoute( path: MorphemeRoutes.forgotPassword, builder: (context, state) =&gt; const ForgotPasswordPage(), ), ], ), StatefulShellRoute.indexedStack( builder: (context, state, navigationShell) =&gt; MainPage(navigationShell: navigationShell), branches: [ ...homeRoutes, ...newsRoutes, ...profileRoutes, ], ), ], ); } Register GoRouter in service locator get_it lib/locator.dart void setupLocator() { locator.registerLazySingleton(() =&gt; Routes.router); // add this setupLocatorFeatureCore(); setupLocatorFeatureAuth(); setupLocatorFeatureOnboarding(); setupLocatorFeatureHome(); setupLocatorFeatureNews(); setupLocatorFeatureProfile(); setupLocatorFeatureSelling(); } And then setup router in MaterialApp.router lib/main.dart class MyApp extends StatelessWidget { const MyApp({super.key}); @override Widget build(BuildContext context) { final router = locator&lt;GoRouter&gt;(); return BlocProvider( create: (context) =&gt; GlobalCubit(), child: Builder(builder: (context) { return MaterialApp.router( title: 'Morpheme', scaffoldMessengerKey: scaffoldMessengerKey, theme: context.selectedTheme.themeData, darkTheme: context.selectedTheme.themeData, locale: context.selectedLocale, localizationsDelegates: S.localizationsDelegates, supportedLocales: S.supportedLocales, routerConfig: router, // add this ); }), ); } } core/lib/src/constants/src/morpheme_routes.dart In this file we separate 3 part Constants path name class MorphemeRoutes abstract final class MorphemeRoutes { static const String splash = '/'; static const String onboarding = 'onboarding'; static const String login = 'login'; static const String register = 'register'; static const String forgotPassword = 'forgot-password'; static const String main = 'main'; static const String home = 'home'; static const String news = 'news'; static const String profile = 'profile'; static const String selling = 'selling'; } Path for routes PathRoutes in PathRoutes we have 2 way to set path use joinRoutes this is static way to join path (e.g joinRoutes(['auth', 'login']) than result '/auth/login')use dynamicRoutes this dynamic way to define path (e.g last route is '/auth' now you add dynamicRoutes('login') than result is '/auth/login') abstract final class PathRoutes { static String get onboarding =&gt; joinRoutes([MorphemeRoutes.onboarding]); static String get login =&gt; joinRoutes([MorphemeRoutes.login]); static String get register =&gt; dynamicRoutes(MorphemeRoutes.register); static String get forgotPassword =&gt; dynamicRoutes(MorphemeRoutes.forgotPassword); static String get home =&gt; joinRoutes([MorphemeRoutes.home]); static String get news =&gt; joinRoutes([MorphemeRoutes.news]); static String get profile =&gt; joinRoutes([MorphemeRoutes.profile]); static String get selling =&gt; dynamicRoutes(MorphemeRoutes.selling); } Extension om BuildContext for easy use later in MorphemeRoutesContextExtension extension MorphemeRoutesContextExtension on BuildContext { void goToOnboading() =&gt; go(PathRoutes.onboarding); void goToLogin() =&gt; go(PathRoutes.login); void goToRegister() =&gt; go(PathRoutes.register); void goToForgotPassword() =&gt; go(PathRoutes.forgotPassword); void goToHome() =&gt; go(PathRoutes.home); void goToNews() =&gt; go(PathRoutes.news); void goToProfile() =&gt; go(PathRoutes.profile); void goToSelling({ required Function(dynamic result) onReturn, }) =&gt; goWithResult(PathRoutes.selling, onReturn: onReturn); }  "},{"title":"How to Navigate​","type":1,"pageTitle":"Routes","url":"/morpheme-flutter-documentation/docs/starter_kit/routes#how-to-navigate","content":"To use navigate if you already done to define then call from extension BuildContext. InkWell( onTap: () =&gt; context.goToLogin(); child: Text('Login'), ),  "},{"title":"Environment (morpheme.yaml)","type":0,"sectionRef":"#","url":"/morpheme-flutter-documentation/docs/starter_kit/environment","content":"","keywords":""},{"title":"Summary​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#summary","content":"morpheme.yaml is the config environment used by the morpheme flutter starter kit, developers are required to do run morpheme init or copy the existing morpheme.yaml file. keep morpheme.yaml secret and ignore dare repository. morpheme.yaml project_name: Morpheme flavor: dev: FLAVOR: dev APP_NAME: Morpheme Dev ANDROID_APPLICATION_ID: design.morpheme.dev IOS_APPLICATION_ID: design.morpheme.dev BASE_URL: https://reqres.in/api stag: FLAVOR: stag APP_NAME: Morpheme Stag ANDROID_APPLICATION_ID: design.morpheme.stag IOS_APPLICATION_ID: design.morpheme.stag BASE_URL: https://reqres.in/api prod: FLAVOR: prod APP_NAME: Morpheme ANDROID_APPLICATION_ID: design.morpheme IOS_APPLICATION_ID: design.morpheme BASE_URL: https://reqres.in/api firebase: dev: project_id: &quot;morpheme-dev&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; stag: project_id: &quot;morpheme-stag&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; prod: project_id: &quot;morpheme&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; localization: arb_dir: assets/assets/l10n template_arb_file: id.arb output_localization_file: s.dart output_class: S output_dir: core/lib/src/l10n replace: false assets: pubspec_dir: assets assets_dir: assets/assets output_dir: assets/lib create_library_file: true coverage: lcov_dir: coverage/lcov.info output_html_dir: coverage/html remove: - &quot;*/mock/*&quot; - &quot;*.freezed.*&quot; - &quot;*.g.*&quot; - &quot;*/l10n/*&quot; - &quot;*_state.dart&quot; - &quot;*_event.dart&quot; - &quot;**/locator.dart&quot; - &quot;**/environtment.dart&quot; - &quot;core/lib/src/test/*&quot; - &quot;core/lib/src/constants/*&quot; - &quot;core/lib/src/themes/*&quot; - &quot;lib/routes/routes.dart&quot; - &quot;lib/generated_plugin_registrant.dart&quot;  "},{"title":"Project Name​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#project-name","content":"project_name will be used in some generators for naming files, classes and variables. project_name's default value is Morpheme "},{"title":"Example Default (Morpheme)​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#example-default-morpheme","content":"morpheme.yaml ... project_name: Morpheme ...  example to generate assets if we use default or Morpheme for project_name then we run command morpheme assets, we see file generated like this: Folder Structure . ├── assets │ ├── assets │ │ ├── images │ │ │ ├── example.png │ ├── lib │ │ ├── src │ │ │ ├── morpheme_images.dart # filename generate will prefix morpheme └── ...  assets/lib/src/morpheme_images.dart abstract class MorphemeImages { // Prefix class name with morpheme // ignore: unused_field static const String _assets = 'packages/assets/assets/images'; static const String example = '$_assets/example.png'; }  "},{"title":"Example Custom (Example)​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#example-custom-example","content":"morpheme.yaml ... project_name: Example ...  example to generate assets if we use default or Morpheme for project_name then we run command morpheme assets, we see file generated like this: Folder Structure . ├── assets │ ├── assets │ │ ├── images │ │ │ ├── example.png │ ├── lib │ │ ├── src │ │ │ ├── example_images.dart # filename generate will prefix example └── ...  assets/lib/src/example_images.dart abstract class ExampleImages { // Prefix class name with example // ignore: unused_field static const String _assets = 'packages/assets/assets/images'; static const String example = '$_assets/example.png'; }  "},{"title":"List Usages​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#list-usages","content":"For more information on the use of project_name, see the following list: Assets or CLI morpheme assetsJson2dart or CLI morpheme json2dartCLI morpheme configCLI morpheme endpointCLI morpheme apiCLI morpheme unit-test "},{"title":"Flavor​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#flavor","content":"Flavor has 3 variants dev, stag and prod, each of the variants has the same key but the value can be different from one another. Keys that are FLAVOR, APP_NAME, ANDROID_APPLICATION_ID and IOS_APPLICATION_ID used on Android and iOS natively. The way it works is that the flavor will be changed to the --dart-define in cli argument which is used during run or build. ... flavor: dev: FLAVOR: dev # Mandatory APP_NAME: Morpheme Dev # Mandatory ANDROID_APPLICATION_ID: design.morpheme.dev # Mandatory IOS_APPLICATION_ID: design.morpheme.dev # Mandatory BASE_URL: https://reqres.in/api stag: FLAVOR: stag # Mandatory APP_NAME: Morpheme Stag # Mandatory ANDROID_APPLICATION_ID: design.morpheme.stag # Mandatory IOS_APPLICATION_ID: design.morpheme.stag # Mandatory BASE_URL: https://reqres.in/api prod: FLAVOR: prod # Mandatory APP_NAME: Morpheme # Mandatory ANDROID_APPLICATION_ID: design.morpheme # Mandatory IOS_APPLICATION_ID: design.morpheme # Mandatory BASE_URL: https://reqres.in/api ...  "},{"title":"Usages​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#usages","content":"Flutter​ core/lib/scr/environment.dart class Environment { static const bool isDev = String.fromEnvironment('FLAVOR') == 'dev'; static const bool isNotDev = String.fromEnvironment('FLAVOR') != 'dev'; static const bool isStag = String.fromEnvironment('FLAVOR') == 'stag'; static const bool isNotStag = String.fromEnvironment('FLAVOR') != 'stag'; static const bool isProd = String.fromEnvironment('FLAVOR') == 'prod'; static const bool isNotProd = String.fromEnvironment('FLAVOR') != 'prod'; static const String baseUrl = String.fromEnvironment('BASE_URL'); }  Android​ To get dart define from argument on android add in android/app/build.gradle android/app/build.gradle ... def dartEnvironmentVariables = [] if (project.hasProperty('dart-defines')) { dartEnvironmentVariables = project.property('dart-defines') .split(',') .collectEntries { entry -&gt; def pair = new String(entry.decodeBase64(), 'UTF-8').split('=') [(pair.first()): pair.last()] } } android { ... defaultConfig { applicationId dartEnvironmentVariables.APPLICATION_ID // Take from dart define minSdkVersion minSdk targetSdkVersion targetSdk versionCode flutterVersionCode.toInteger() versionName flutterVersionName resValue &quot;string&quot;, &quot;app_name&quot;, dartEnvironmentVariables.APP_NAME // Take from dart define multiDexEnabled = true } }  iOS​ To get the dart define of the arguments on ios add a pre-action to the scheme runner  # Type a script or drag a script file from your workspace to insert its path. function entry_decode() { echo &quot;${*}&quot; | base64 --decode; } IFS=',' read -r -a define_items &lt;&lt;&lt; &quot;$DART_DEFINES&quot; for index in &quot;${!define_items[@]}&quot; do define_items[$index]=$(entry_decode &quot;${define_items[$index]}&quot;); done printf &quot;%s\\n&quot; &quot;${define_items[@]}&quot; &gt; ${SRCROOT}/Flutter/DartDefined.xcconfig  Then in Debug.xcconfig &amp; Release.xcconfig add this #include &quot;DartDefined.xcconfig&quot;  Example usage on ios in Info.plist: &lt;key&gt;CFBundleDisplayName&lt;/key&gt; &lt;string&gt;${APP_NAME}&lt;/string&gt;  "},{"title":"Localization / Internationalization​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#localization--internationalization","content":"morpheme.yaml ... localization: arb_dir: assets/assets/l10n template_arb_file: id.arb output_localization_file: s.dart output_class: S output_dir: core/lib/src/l10n replace: false ...  "},{"title":"Configuring localization in morpheme.yaml file​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#configuring-localization-in-morphemeyaml-file","content":"Option\tDescriptionarb-dir\tThe directory where the template and translated arb files are located. template-arb-file\tThe template arb file that is used as the basis for generating the Dart localization and messages files. output-localization-file\tThe filename for the output localization and localizations delegate classes. output-dir\tThe directory where the generated localization classes are written. This option is only relevant if you want to generate the localizations code somewhere else in the Flutter project. You also need to set the synthetic-package flag to false. The app must import the file specified in the output-localization-file option from this directory. If unspecified, this defaults to the same directory as the input directory specified in arb-dir. replace\tAllow you to replace and merge with default each root .arb if you use separate folder e.g en.arb will be maintained from generate. by default is false Learn more about Internationalization here "},{"title":"Firebase​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#firebase","content":"morpheme.yaml ... firebase: dev: project_id: &quot;morpheme-dev&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; stag: project_id: &quot;morpheme-stag&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot; prod: project_id: &quot;morpheme&quot; token: &quot;YOUR FIREBASE TOKEN: firebase login:ci&quot;  Learn more about Firebase here "},{"title":"Assets​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#assets","content":"morpheme.yaml ... assets: pubspec_dir: assets assets_dir: assets/assets output_dir: assets/lib create_library_file: true ...  "},{"title":"Configuring assets in morpheme.yaml file​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#configuring-assets-in-morphemeyaml-file","content":"Option\tDescriptionpubspec_dir\tThe directory where the module assets are located. assets_dir\tThe directory where the assets are located. assets_dir\tThe directory where the assets are located. output-dir\tThe directory where the generated localization classes are written. create_library_file\tAllow to generated file dart library with export file-filed generated. Learn more about Assets here "},{"title":"Coverage​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#coverage","content":"morpheme.yaml ... coverage: lcov_dir: coverage/lcov.info output_html_dir: coverage/html remove: - &quot;*/mock/*&quot; - &quot;*.freezed.*&quot; - &quot;*.g.*&quot; - &quot;*/l10n/*&quot; - &quot;*_state.dart&quot; - &quot;*_event.dart&quot; - &quot;**/locator.dart&quot; - &quot;**/environtment.dart&quot; - &quot;core/lib/src/test/*&quot; - &quot;core/lib/src/constants/*&quot; - &quot;core/lib/src/themes/*&quot; - &quot;lib/routes/routes.dart&quot; - &quot;lib/generated_plugin_registrant.dart&quot; ...  "},{"title":"Configuring coverage in morpheme.yaml file​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#configuring-coverage-in-morphemeyaml-file","content":"Option\tDescriptionlcov_dir\tThe directory where the lcov.info are located. output_html_dir\tThe directory where output the generated report html are written. remove\tIgnore or remove pattern dir / file support glob from calculate coverage. Learn more about Coverage here "},{"title":"References​","type":1,"pageTitle":"Environment (morpheme.yaml)","url":"/morpheme-flutter-documentation/docs/starter_kit/environment#references","content":"https://medium.com/@tatsu.ukraine/flutter-2-2-dart-defines-and-breaking-changes-here-we-go-again-ce40cfea74fdhttps://medium.com/flutter-community/how-to-setup-dart-define-for-keys-and-secrets-on-android-and-ios-in-flutter-apps-4f28a10c4b6c "}]