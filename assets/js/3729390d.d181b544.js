"use strict";(self.webpackChunkmorpheme_flutter_documentation=self.webpackChunkmorpheme_flutter_documentation||[]).push([[703],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,g=s["".concat(p,".").concat(d)]||s[d]||c[d]||o;return n?r.createElement(g,i(i({ref:t},m),{},{components:n})):r.createElement(g,i({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3950:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={},i="Morpheme Cucumber",l={unversionedId:"morpheme_library/morpheme_cucumber",id:"morpheme_library/morpheme_cucumber",title:"Morpheme Cucumber",description:"Link: pub.dev",source:"@site/docs/morpheme_library/morpheme_cucumber.md",sourceDirName:"morpheme_library",slug:"/morpheme_library/morpheme_cucumber",permalink:"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cucumber",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mySidebars",previous:{title:"Morpheme Cached Network Image",permalink:"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_cached_netwrok_image"},next:{title:"Morpheme Extension",permalink:"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension"}},p={},u=[{value:"Installation",id:"installation",level:2},{value:"Morpheme Cli",id:"morpheme-cli",level:3},{value:"Usage",id:"usage",level:2},{value:"Config",id:"config",level:3},{value:"Hook",id:"hook",level:3},{value:"Step Definitions",id:"step-definitions",level:3},{value:"Add Assets in pubspec.yaml",id:"add-assets-in-pubspecyaml",level:3},{value:"Reporters",id:"reporters",level:3},{value:"Features",id:"features",level:3}],m={toc:u};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"morpheme-cucumber"},"Morpheme Cucumber"),(0,a.kt)("p",null,"Link: ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/packages/morpheme_cucumber"},"pub.dev")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"morpheme_cucumber")," package builds on top of ",(0,a.kt)("inlineCode",{parentName:"p"},"patrol")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"integration_test")," to make\nit easy to integration test with gherkin language."),(0,a.kt)("p",null,"It can be used on ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/packages/morpheme_cli"},"morpheme_cli"),"."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"installation morpheme_cli"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"dart pub global activate morpheme_cli\n")),(0,a.kt)("p",null,"installation morpheme flutter in your project"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"morpheme create\n")),(0,a.kt)("h3",{id:"morpheme-cli"},"Morpheme Cli"),(0,a.kt)("p",null,"Now you done for setup all MorphemeCucumber then you can call morpheme command:"),(0,a.kt)("p",null,"First init to create morpheme.yaml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"morpheme init\n")),(0,a.kt)("p",null,"Then download all dependency with morpheme get"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"morpheme get\n")),(0,a.kt)("p",null,"Last you can run cucumber command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"morpheme cucumber\n")),(0,a.kt)("p",null,"by default run ",(0,a.kt)("inlineCode",{parentName:"p"},"integration_test/cucumber_test.dart")," by flavor dev. if you want to running flavor stag or prod just add argument ",(0,a.kt)("inlineCode",{parentName:"p"},"--flavor stag")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--flavor prod")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"To use morpheme_cucumber create file ",(0,a.kt)("inlineCode",{parentName:"p"},"cucumber_test.dart")," in your ",(0,a.kt)("inlineCode",{parentName:"p"},"integration_test")," directory.\nThen import it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:morpheme_cucumber/morpheme_cucumber.dart';\n")),(0,a.kt)("p",null,"Once imported, you can write widget tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="integration_test/cucumber_test.dart"',title:'"integration_test/cucumber_test.dart"'},"import 'support/cucumber_config.dart';\nimport 'support/cucumber_hook.dart';\nimport 'support/step_definitions.dart';\n\nvoid main() async {\n  await MorphemeCucumber(\n    config: CucumberConfig(),\n    hook: CucumberHook(),\n    reporter: [JsonReporter(), StdoutReporter()],\n    stepDefinitions: stepDefinitions,\n  ).execute();\n}\n")),(0,a.kt)("h3",{id:"config"},"Config"),(0,a.kt)("p",null,"You can create ",(0,a.kt)("inlineCode",{parentName:"p"},"Config")," or make it default null:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="integration_test/support/cucumber_config.dart"',title:'"integration_test/support/cucumber_config.dart"'},"import 'package:core/core.dart';\nimport 'package:morpheme_cucumber/morpheme_cucumber.dart';\n\nclass CucumberConfig extends Config {\n  @override\n  bool get nativeAutomation => false;\n\n  @override\n  NativeAutomatorConfig get nativeAutomatorConfig =>\n      const NativeAutomatorConfig(\n        androidAppName: Environment.appName,\n        iosAppName: Environment.appName,\n        packageName: Environment.androidApplicationId,\n        bundleId: Environment.iosApplicationId,\n      );\n\n  @override\n  PatrolTesterConfig get patrolTesterConfig => const PatrolTesterConfig(\n        visibleTimeout: Duration(minutes: 1),\n      );\n\n  @override\n  bool get skipScenario => false;\n\n  @override\n  Duration get timeout => const Duration(minutes: 5);\n}\n")),(0,a.kt)("h3",{id:"hook"},"Hook"),(0,a.kt)("p",null,"Now you can add your ",(0,a.kt)("inlineCode",{parentName:"p"},"Hook")," for cucumber:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="integration_test/support/cucumber_hook.dart"',title:'"integration_test/support/cucumber_hook.dart"'},"import 'package:core/core.dart';\nimport 'package:morpheme_cucumber/morpheme_cucumber.dart';\nimport 'package:morpheme_flutter_starter_kit/main.dart' as app;\n\nclass CucumberHook extends Hook {\n  @override\n  Future<void> onBeforeExecute() async {\n    await app.init();\n  }\n\n  @override\n  Future<void> onAfterExecute() async {}\n\n  @override\n  Future<void> onBeforeFeature(PatrolTester $) async {}\n\n  @override\n  Future<void> onAfterFeature(PatrolTester $) async {\n    await FlutterSecureStorageHelper.logout();\n  }\n\n  @override\n  Future<void> onBeforeScenario(PatrolTester $) async {\n    await $.pumpWidget(const app.MyApp());\n  }\n\n  @override\n  Future<void> onAfterScenario(PatrolTester $) async {\n    locator<GoRouter>().go('/');\n  }\n\n  @override\n  Future<void> onBeforeStep(PatrolTester $) async {}\n\n  @override\n  Future<void> onAfterStep(PatrolTester $) async {}\n}\n")),(0,a.kt)("h3",{id:"step-definitions"},"Step Definitions"),(0,a.kt)("p",null,"and the requirement morpheme_cucumber its ",(0,a.kt)("inlineCode",{parentName:"p"},"step_definitions.dart"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="integration_test/support/step_definitions.dart"',title:'"integration_test/support/step_definitions.dart"'},'import \'package:flutter/material.dart\';\nimport \'package:morpheme_cucumber/morpheme_cucumber.dart\';\n\nMap<RegExp, Function> stepDefinitions = {\n  // Action\n  RegExp(r\'I wait for "([^"]*)" key to visible\'):\n      (PatrolTester $, String key) async {\n    await $(Key(key)).waitUntilVisible();\n  },\n  RegExp(r\'I clear textfield in "([^"]*)" key\'):\n      (PatrolTester $, String key) async {\n    await $(Key(key)).enterText(\'\');\n  },\n  RegExp(r\'I enter "([^"]*)" into "([^"]*)" key\'):\n      (PatrolTester $, String value, String key) async {\n    await $(Key(key)).enterText(value);\n  },\n  RegExp(r\'I scroll in "([^"]*)" key until visible "([^"]*)" key\'):\n      (PatrolTester $, String scrollKey, String visibleKey) async {\n    await $(Key(visibleKey))\n        .scrollTo(scrollable: $(Key(scrollKey)).$(Scrollable));\n  },\n  RegExp(r\'I tap "([^"]*)" key\'): (PatrolTester $, String key) async {\n    await $(Key(key)).tap();\n  },\n  RegExp(r\'I longtap "([^"]*)" key\'): (PatrolTester $, String key) async {\n    await $.tester.longPress($(key));\n  },\n};\n')),(0,a.kt)("p",null,"you can add your custom another step definitions with ",(0,a.kt)("inlineCode",{parentName:"p"},"RegExp")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"String ",(0,a.kt)("inlineCode",{parentName:"li"},'"([^"]*)"')),(0,a.kt)("li",{parentName:"ul"},"num ",(0,a.kt)("inlineCode",{parentName:"li"},'"(\\d+)"')),(0,a.kt)("li",{parentName:"ul"},"Select ",(0,a.kt)("inlineCode",{parentName:"li"},'"(JSON|YAML|XML|HTML)"'))),(0,a.kt)("p",null,"or other reg exp just on grouping ",(0,a.kt)("inlineCode",{parentName:"p"},"()"),"."),(0,a.kt)("h3",{id:"add-assets-in-pubspecyaml"},"Add Assets in pubspec.yaml"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create directory in ",(0,a.kt)("inlineCode",{parentName:"li"},"integration_test/ndjson/")),(0,a.kt)("li",{parentName:"ol"},"Then add as assets in ",(0,a.kt)("inlineCode",{parentName:"li"},"pubspec.yaml"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="pubspec.yaml"',title:'"pubspec.yaml"'},"...\nflutter:\n  uses-material-design: true\n  assets:\n    - integration_test/ndjson/\n")),(0,a.kt)("h3",{id:"reporters"},"Reporters"),(0,a.kt)("p",null,"Reporters are classes that are able to report on the status of the test run. This could be a simple as merely logging scenario result to the console. There are a number of built-in reporter:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"StdoutReporter")," : Logs all messages from the test run to the standard output (console)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"JsonReporter")," : creates a JSON file with the results of the test run which can then be used by '",(0,a.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/cucumber-html-reporter"},"https://www.npmjs.com/package/cucumber-html-reporter"),".' to create a HTML report. You can pass in the file path of the json file to be created")),(0,a.kt)("h3",{id:"features"},"Features"),(0,a.kt)("p",null,"write your feature in integration_test/features/login.feature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-feature",metastring:'title="integration_test/features/login.feature"',title:'"integration_test/features/login.feature"'},'Feature: Login\n\n  Scenario: Login with username and pin then failed\n    When I enter "example@morpheme.id" into "inputEmail" key\n    When I scroll in "scrollLogin" key until visible "inputPin" key\n    When I enter "123455" into "inputPin" key\n    When I scroll in "scrollLogin" key until visible "btnLogin" key\n    When I tap "btnLogin" key\n\n  Scenario: Login with username and pin then success\n    When I enter "example@morpheme.id" into "inputEmail" key\n    When I scroll in "scrollLogin" key until visible "inputPin" key\n    When I enter "123456" into "inputPin" key\n    When I scroll in "scrollLogin" key until visible "btnLogin" key\n    When I tap "btnLogin" key\n')))}s.isMDXComponent=!0}}]);