"use strict";(self.webpackChunkmorpheme_flutter_documentation=self.webpackChunkmorpheme_flutter_documentation||[]).push([[1768],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(r),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1987:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:18},i="Coverage",c={unversionedId:"starter_kit/coverage",id:"starter_kit/coverage",title:"Coverage",description:"Requirement",source:"@site/docs/starter_kit/coverage.md",sourceDirName:"starter_kit",slug:"/starter_kit/coverage",permalink:"/morpheme-flutter-documentation/docs/starter_kit/coverage",draft:!1,tags:[],version:"current",sidebarPosition:18,frontMatter:{sidebar_position:18},sidebar:"mySidebars",previous:{title:"Json2Dart",permalink:"/morpheme-flutter-documentation/docs/starter_kit/json2dart"},next:{title:"Deployment",permalink:"/morpheme-flutter-documentation/docs/starter_kit/deployment"}},l={},s=[{value:"Requirement",id:"requirement",level:2},{value:"Usage",id:"usage",level:2}],p={toc:s};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"coverage"},"Coverage"),(0,a.kt)("h2",{id:"requirement"},"Requirement"),(0,a.kt)("p",null,"Install lcov with follow ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/linux-test-project/lcov"},"this installation")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},'LCOV is an extension of GCOV, a GNU tool which provides information about\nwhat parts of a program are actually executed (i.e. "covered") while running\na particular test case. The extension consists of a set of Perl scripts\nwhich build on the textual GCOV output to implement the following enhanced\nfunctionality:'),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"* HTML based output: coverage rates are additionally indicated using bar\n  graphs and specific colors.\n\n* Support for large projects: overview pages allow quick browsing of\n  coverage data by providing either a hierarchical directory structure\n  view or a three-level detail view: directory, file and source code view.\n")),(0,a.kt)("p",{parentName:"admonition"},"  LCOV was initially designed to support Linux kernel coverage measurements,\nbut works as well for coverage measurements on standard user space\napplications.")),(0,a.kt)("p",null,"check your installation with run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"lcov -v\n")),(0,a.kt)("p",null,"or you can run command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"morpheme doctor\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"This command is used to calculate our code coverage based on the tests that have been made. Code coverage will not be generated if all the tests we make have not been passed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"morpheme coverage\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"morpheme coverage")," support for Linux and macOS.")))}u.isMDXComponent=!0}}]);