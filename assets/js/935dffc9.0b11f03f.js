"use strict";(self.webpackChunkmorpheme_flutter_documentation=self.webpackChunkmorpheme_flutter_documentation||[]).push([[6710],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(r),h=o,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||a;return r?n.createElement(d,p(p({ref:t},c),{},{components:r})):n.createElement(d,p({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:o,p[1]=i;for(var s=2;s<a;s++)p[s]=r[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},7199:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={},p="Morpheme Inspector",i={unversionedId:"morpheme_library/morpheme_inspector",id:"morpheme_library/morpheme_inspector",title:"Morpheme Inspector",description:"Link: pub.dev",source:"@site/docs/morpheme_library/morpheme_inspector.md",sourceDirName:"morpheme_library",slug:"/morpheme_library/morpheme_inspector",permalink:"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_inspector",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mySidebars",previous:{title:"Morpheme HTTP",permalink:"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http"},next:{title:"Morpheme Responsive",permalink:"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_responsive"}},l={},s=[{value:"Supported",id:"supported",level:2},{value:"Feature",id:"feature",level:2},{value:"How to Usage",id:"how-to-usage",level:2}],c={toc:s};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"morpheme-inspector"},"Morpheme Inspector"),(0,o.kt)("p",null,"Link: ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/morpheme_inspector"},"pub.dev")),(0,o.kt)("p",null,"Morpheme Inspector is a simple in-app for Morpheme HTTP inspector. Morpheme Inspector intercepts and persists all HTTP requests and responses inside your application, and provides a UI for inspecting their content. It is inspired from ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages?q=alice"},"Alice"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jgilfelt/chuck"},"Chuck")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ChuckerTeam/chucker"},"Chucker"),"."),(0,o.kt)("h2",{id:"supported"},"Supported"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pub.dev/packages/morpheme_http"},"Morpheme HTTP"))),(0,o.kt)("h2",{id:"feature"},"Feature"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Detailed logs for each HTTP calls (HTTP Request, HTTP Response)"),(0,o.kt)("li",{parentName:"ul"},"Inspector UI for viewing HTTP calls"),(0,o.kt)("li",{parentName:"ul"},"Save HTTP calls to Sqflite"),(0,o.kt)("li",{parentName:"ul"},"Notification on HTTP call"),(0,o.kt)("li",{parentName:"ul"},"Support for top used HTTP clients in Dart"),(0,o.kt)("li",{parentName:"ul"},"Shake to open inspector"),(0,o.kt)("li",{parentName:"ul"},"HTTP calls search")),(0,o.kt)("h2",{id:"how-to-usage"},"How to Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"locator.registerLazySingleton(\n    () => MorphemeInspector(\n      showNotification: true, // default true\n      showInspectorOnShake: true, // default true\n      saveInspectorToLocal: true, // default true\n      notificationIcon: '@mipmap/ic_launcher', // default '@mipmap/ic_launcher' just for android\n    ),\n  );\n  locator.registerLazySingleton(\n    () => MorphemeHttp(\n      timeout: 30000,\n      showLog: true,\n      morphemeInspector: locator(), // add this for activate inspector in Morpheme HTTP\n    ),\n  );\n")),(0,o.kt)("p",null,"to help navigate without context to the morpheme inspector page it is necessary to setup the navigator state with the method ",(0,o.kt)("inlineCode",{parentName:"p"},"setNavigatorState(Navigator.of(context))")," and is recommended on start pages like ",(0,o.kt)("inlineCode",{parentName:"p"},"SplashPage"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class SplashPage extends StatefulWidget {\n  const SplashPage({Key? key}) : super(key: key);\n\n  @override\n  State<SplashPage> createState() => _SplashPageState();\n}\n\nclass _SplashPageState extends State<SplashPage> {\n  @override\n  void initState() {\n    super.initState();\n    locator<MorphemeInspector>().setNavigatorState(Navigator.of(context)); // add this to navigate from local notification or on shake \n    ...\n  }\n  ...\n}\n")))}m.isMDXComponent=!0}}]);