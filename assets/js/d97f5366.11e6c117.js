"use strict";(self.webpackChunkmorpheme_flutter_documentation=self.webpackChunkmorpheme_flutter_documentation||[]).push([[268],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=s(n),d=o,c=h["".concat(i,".").concat(d)]||h[d]||m[d]||a;return n?r.createElement(c,p(p({ref:t},u),{},{components:n})):r.createElement(c,p({ref:t},u))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,p=new Array(a);p[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[h]="string"==typeof e?e:o,p[1]=l;for(var s=2;s<a;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6773:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={},p="Morpheme HTTP",l={unversionedId:"morpheme_library/morpheme_http",id:"morpheme_library/morpheme_http",title:"Morpheme HTTP",description:"Link: pub.dev",source:"@site/docs/morpheme_library/morpheme_http.md",sourceDirName:"morpheme_library",slug:"/morpheme_library/morpheme_http",permalink:"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_http",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mySidebars",previous:{title:"Morpheme Extension",permalink:"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_extension"},next:{title:"Morpheme Inspector",permalink:"/morpheme-flutter-documentation/docs/morpheme_library/morpheme_inspector"}},i={},s=[{value:"Auth Token",id:"auth-token",level:2},{value:"Refresh Token",id:"refresh-token",level:2},{value:"Get",id:"get",level:2},{value:"Post",id:"post",level:2},{value:"Put",id:"put",level:2},{value:"Patch",id:"patch",level:2},{value:"Delete",id:"delete",level:2},{value:"Post Multipart",id:"post-multipart",level:2}],u={toc:s};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"morpheme-http"},"Morpheme HTTP"),(0,o.kt)("p",null,"Link: ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/morpheme_http"},"pub.dev")),(0,o.kt)("p",null,"Morpheme HTTP uses the ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/http"},"http")," library which has been modified as needed. first we store ",(0,o.kt)("inlineCode",{parentName:"p"},"MorphemeHttp")," into ",(0,o.kt)("inlineCode",{parentName:"p"},"locator"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"locator")," is the service locator from ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/get_it"},"get_it"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final locator = GetIt.instance;\n\nlocator.registerLazySingleton(\n  () => MorphemeHttp(\n    timeout: 30000,\n    showLog: true,\n    morphemeInspector: locator(),\n    authTokenOption: AuthTokenOption(\n      typeHeader: 'Authorization',\n      prefixHeader: 'Bearer',\n      getToken: () => locator<FlutterSecureStorage>().read(key: 'token'),\n      authCondition: (request, response) =>\n          request.url == MorphemeEndpoints.login,\n      onAuthTokenResponse: (response) async {\n        final map = jsonDecode(response.body);\n        await locator<FlutterSecureStorage>().write(\n          key: 'token',\n          value: map['token'],\n        );\n        await locator<FlutterSecureStorage>().write(\n          key: 'refresh_token',\n          value: map['refresh_token'],\n        );\n      },\n      clearCondition: (request, response) =>\n          request.url == MorphemeEndpoints.logout,\n      onClearToken: () =>\n          locator<FlutterSecureStorage>().delete(key: 'token'),\n      excludeEndpointUsageToken: [\n        MorphemeEndpoints.login,\n        MorphemeEndpoints.register,\n      ],\n    ),\n    refreshTokenOption: RefreshTokenOption(\n      method: RefreshTokenMethod.post,\n      url: MorphemeEndpoints.refreshToken,\n      condition: (request, response) =>\n          request.url != MorphemeEndpoints.login && response.statusCode == 401,\n      getBody: () async {\n        final refreshToken =\n            await locator<FlutterSecureStorage>().read(key: 'refresh_token');\n\n        return {\n          'refresh_token': refreshToken ?? '',\n        };\n      },\n      onResponse: (response) async {\n        // handle response refresh token\n        final map = jsonDecode(response.body);\n        locator<FlutterSecureStorage>().write(\n          key: 'token',\n          value: map['token'],\n        );\n      },\n    ),\n  );\n")),(0,o.kt)("p",null,"and to enable http inspector need to add dependency ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/morpheme_inspector"},"morpheme_inspector")," and put in ",(0,o.kt)("inlineCode",{parentName:"p"},"locator"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"locator.registerLazySingleton(\n    () => MorphemeInspector(\n      showNotification: true, // default true\n      showInspectorOnShake: true, // default true\n      saveInspectorToLocal: true, // default true\n      notificationIcon: '@mipmap/ic_launcher', // default '@mipmap/ic_launcher' just for android\n    ),\n  );\n")),(0,o.kt)("h2",{id:"auth-token"},"Auth Token"),(0,o.kt)("p",null,"To set the token, it is done after authorization and getting the token. the token is stored to local and setup on ",(0,o.kt)("inlineCode",{parentName:"p"},"MorphemeHttp"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"MorphemeHttp(\n  ...\n  authTokenOption:AuthTokenOption(\n    typeHeader: 'Authorization',\n    prefixHeader: 'Bearer',\n    getToken: () => locator<FlutterSecureStorage>().read(key: 'token'),\n    authCondition: (request, response) =>\n        request.url == MorphemeEndpoints.login,\n    onAuthTokenResponse: (response) async {\n      final map = jsonDecode(response.body);\n      await locator<FlutterSecureStorage>().write(\n        key: 'token',\n        value: map['token'],\n      );\n      await locator<FlutterSecureStorage>().write(\n        key: 'refresh_token',\n        value: map['refresh_token'],\n      );\n    },\n    clearCondition: (request, response) =>\n        request.url == MorphemeEndpoints.logout,\n    onClearToken: () =>\n        locator<FlutterSecureStorage>().delete(key: 'token'),\n    excludeEndpointUsageToken: [\n      MorphemeEndpoints.login,\n      MorphemeEndpoints.register,\n    ],\n  ),\n  ...\n);\n")),(0,o.kt)("p",null,"After we set the token, every API call will add an ",(0,o.kt)("inlineCode",{parentName:"p"},"Authorization")," header with a default value of ",(0,o.kt)("inlineCode",{parentName:"p"},"Bearer $token"),"."),(0,o.kt)("h2",{id:"refresh-token"},"Refresh Token"),(0,o.kt)("p",null,"To set the token, it is done after authorization and getting the token. the token is stored to local and setup on ",(0,o.kt)("inlineCode",{parentName:"p"},"MorphemeHttp"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"MorphemeHttp(\n  ...\n  refreshTokenOption: RefreshTokenOption(\n    method: RefreshTokenMethod.post,\n    url: MorphemeEndpoints.refreshToken,\n    condition: (request, response) =>\n        request.url != MorphemeEndpoints.login && response.statusCode == 401,\n    getBody: () async {\n      final refreshToken =\n          await locator<FlutterSecureStorage>().read(key: 'refresh_token');\n\n      return {\n        'refresh_token': refreshToken ?? '',\n      };\n    },\n    onResponse: (response) async {\n      // handle response refresh token\n      final map = jsonDecode(response.body);\n      locator<FlutterSecureStorage>().write(\n        key: 'token',\n        value: map['token'],\n      );\n    },\n  ),\n  ...\n);\n")),(0,o.kt)("h2",{id:"get"},"Get"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final MorphemeHttp http = locator();\n\nfinal response = await http.get(Uri.parse('https://api.morpheme.id'), body: body.toMap());\n")),(0,o.kt)("h2",{id:"post"},"Post"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final MorphemeHttp http = locator();\n\nfinal response = await http.post(Uri.parse('https://api.morpheme.id'), body: body.toMap());\n")),(0,o.kt)("h2",{id:"put"},"Put"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final MorphemeHttp http = locator();\n\nfinal response = await http.put(Uri.parse('https://api.morpheme.id'), body: body.toMap());\n")),(0,o.kt)("h2",{id:"patch"},"Patch"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final MorphemeHttp http = locator();\n\nfinal response = await http.patch(Uri.parse('https://api.morpheme.id'), body: body.toMap());\n")),(0,o.kt)("h2",{id:"delete"},"Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final MorphemeHttp http = locator();\n\nfinal response = await http.delete(Uri.parse('https://api.morpheme.id'), body: body.toMap());\n")),(0,o.kt)("h2",{id:"post-multipart"},"Post Multipart"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final MorphemeHttp http = locator();\nfinal File file = getImage();\n\nfinal response = await http.postMultipart(Uri.parse('https://api.morpheme.id'), files: {'image': file}, body: body.toMap());\n")))}h.isMDXComponent=!0}}]);